@using TruequeTools.Entities

@inject IServiciosTrueque TruequeService
@inject IServiciosProducto ProductoService
@inject IJSRuntime JS

<!-- Modal -->
<div class="modal fade" id="ModalVentas" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Cargar ventas del trueque #@TruequeId</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                @if (exito)
                {
                    <div class="alert alert-success" role="alert">
                        Se actualizó el estado !
                    </div>
                }
                else
                {
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="opcion" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                            <option value="1">Trueque sin ventas</option>
                            <option value="2">Trueque con ventas</option>
                        </InputSelect>
                        <label for="categoria">Seleccione una opcion</label>
                    </div>       
                    @if(opcion == 2)
                    {
                        <hr />
                        @if (!string.IsNullOrEmpty(MensajeError))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @MensajeError
                            </div>
                        }
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" placeholder="Nombre del producto" @bind="producto.Nombre" />
                            <label for="nombreProducto">Nombre del producto</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="producto.Cantidad" class="form-control" placeholder="Cantidad" min="1" max="100" />
                            <label for="cantidadProducto">Cantidad</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber @bind-Value="producto.Monto" class="form-control" placeholder="Precio" />
                            <label for="precioProducto">Precio</label>
                        </div>
                        <div class="form-floating mb-3">
                            <button type="button" class="btn btn-success mt-2 d-block mx-auto text-center" @onclick="AgregarProducto">Agregar</button>
                        </div>
                        @if(productos.Count > 0)
                        {
                            <div class="table-responsive">
                                <!-- Añade esta clase para hacer la tabla responsiva -->
                                <table class="table table-bordered caption-top">
                                    <thead>
                                        <tr>
                                            <th>Nombre</th>
                                            <th>Precio</th>
                                            <th>Cantidad</th>
                                            <th>Total</th>
                                            <th>Borrar</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach(var p in productos)
                                        {
                                            <tr>
                                                <td>@p.Nombre</td>
                                                <td>$@p.Monto</td>
                                                <td>@p.Cantidad</td>
                                                <td>$@(p.Monto * p.Cantidad)</td>
                                                <td style="text-align:center">
                                                    <button class="btn btn-sm btn-dark" @onclick="@(() =>EliminarProducto(p))">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                                        </svg>
                                                    </button>
                                                </td>
                                            </tr>
                                        }    
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-secondary" role="alert">
                                Agrega productos a la lista...
                            </div>
                        }
                    }
                    <button class="w-100 btn btn-lg btn-dark" @onclick="Guardar">Guardar</button>
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int TruequeId { get; set; }

    public List<Producto> productos = new();
    public Producto producto = new();

    string MensajeError = "";
    bool exito = false;
    int opcion;

    void AgregarProducto()
    {
        if (producto.Nombre == null)
        {
            MensajeError = "El nombre no puede estar vacío";
            return;
        }

        if(producto.Cantidad < 1 || producto.Cantidad > 100)
        {
            MensajeError = "La cantidad es invalida (entre 1 y 100)";
            return;
        }

        if(producto.Monto < 1 || producto.Monto > 999999)
        {
            MensajeError = "El monto es invalido (entre 1 y 999.999)";
            return;
        }

        Producto p = new Producto
        {
            Cantidad = producto.Cantidad,
            Nombre = producto.Nombre,
            Monto = producto.Monto,
            TruequeId = TruequeId
        };
        productos.Add(p);
        producto = new();
        MensajeError = "";
    }

    void EliminarProducto(Producto p)
    {
        productos.Remove(p);
    }

    protected override void OnParametersSet()
    {
        opcion = 1;
    }

    public async void Guardar()
    {
        if(opcion == 1)
        {
            Trueque t = await TruequeService.ReadTruequeById(TruequeId);
            t.CargaCompleted = true;
            await TruequeService.OverwriteTruequeById(t);
            exito = true;
            StateHasChanged();
        }
        else if(opcion == 2 && productos.Count > 0)
        {
            Trueque t = await TruequeService.ReadTruequeById(TruequeId);
            t.CargaCompleted = true;
            t.HasVentas = true;
            await TruequeService.OverwriteTruequeById(t);
            await ProductoService.CargarProductos(productos);
            exito = true;
            StateHasChanged();
        }
        else
        {
            MensajeError = "Debe cargar al menos 1 producto !";
            return;
        }
    }

    public async void CerrarModal()
    {
        if (exito)
        {
            await JS.InvokeVoidAsync("refreshPage");
        }
    }

}