@using System.Security.Claims
@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject IWebHostEnvironment Environment
@inject IServiciosSucursal SucursalService
@inject IServiciosCategoria CategoriaService
@inject IServiciosPublicacion PublicacionService
@inject IServiciosImagen ImagenService
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<!-- Modal -->
<div class="modal fade" id="ModalModificar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Modificar Publicacion #@PublicacionId</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" ></button>
            </div>
            <div class="modal-body">     
                <div class="row">
                    <EditForm Model="@Modelo" enctype="multipart/form-data" OnValidSubmit="Modificar" FormName="ModificarPublicacion">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        @if (!string.IsNullOrEmpty(MensajeError))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @MensajeError
                            </div>
                        }
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                            <label for="nombre">Nombre del producto</label>
                            <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                            <label for="descripcion">Descripcion del producto</label>
                            <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                                @foreach (var suc in ListaSucursales!)
                                {
                                    <option value="@suc.Id">@suc.Nombre</option>
                                }
                            </InputSelect>
                            <label for="sucursal">Sucursal</label>
                            <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                                <option value=0>Seleccione una categoría</option>
                                @foreach (var cat in ListaCategorias!)
                                {
                                    <option value="@cat.Id">@cat.Nombre</option>
                                }
                            </InputSelect>
                            <label for="categoria">Categoria</label>
                            <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
                        </div>
                        <hr />
                        @***********NACHO - MANEJO DE IMAGENES***********@
                        <label for="foto">Fotos (opcional)</label>
                        <div class="form-floating mb-3">
                            <div>
                                <InputFile id="fileInput" multiple OnChange="OnInputFileChange" accept="image/*" class="form-control" />
                            </div>
                            <ValidationMessage For="() => Modelo.FileSize" class="text-danger" />
                        </div>
                        @if (PublicacionActual!.HasImages || imageDataUrls.Count > 0)
                        {
                            <div class="form-floating mb-3">
                                <button type="button" class="btn btn-danger mt-2 d-block mx-auto text-center" @onclick="ClearInputFile">Limpiar Imagenes</button>
                            </div>
                        }
                        @if (imageDataUrls != null)
                        {
                            <div class="table-responsive" style="display:flex; justify-content:center">
                                <table class="table table-bordered" style="text-align:center">
                                    <tr>
                                        @foreach (var imageDataUrl in imageDataUrls)
                                        {
                                            <td>
                                                <img src="@imageDataUrl" style="width: 100px; height: 100px;" />
                                            </td>
                                        }
                                    </tr>
                                </table>
                            </div>    
                        }
                        @***********NACHO - MANEJO DE IMAGENES***********@
                        <button type="submit" class="w-100 btn btn-lg btn-dark">Modificar Publicacion</button>
                    </EditForm>
                </div>                
            </div>
        </div>
    </div>
</div>

<script>
    function ClearInput() {
        var input = document.getElementById("fileInput");
        input.value = ''; // Limpiar el valor del input
    }
</script>

@code {

    [Parameter]
    public int PublicacionId { get; set; }
    [Parameter]
    public Publicacion? PublicacionActual { get; set; }
    [Parameter]
    public List<Sucursal>? ListaSucursales { get; set; }
    [Parameter]
    public List<Categoria>? ListaCategorias { get; set; }

    private String? MensajeError;
    private ClaimsPrincipal? user;

    bool autorizado = true;
    bool cargando = true;
    bool eliminar = false;

    IList<string> imageDataUrls = new List<string>();
    IReadOnlyList<IBrowserFile>? selectedImages;

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
       
        if (PublicacionActual!.HasImages)
        {
            context.Entry(PublicacionActual!).Collection(p => p.Imagenes!).Load();
            foreach (var imageFile in PublicacionActual!.Imagenes!)
            {
                var imageDataUrl = "images/" + @imageFile.FotoUrl;
                imageDataUrls.Add(imageDataUrl);
            }
        }

        Modelo.SucursalId = PublicacionActual!.SucursalId;
        Modelo.CategoriaId = PublicacionActual!.CategoriaId;
        Modelo.Descripcion = PublicacionActual!.Descripcion!;
        Modelo.Nombre = PublicacionActual!.Nombre!;
        cargando = false;
    }

    async Task ClearInputFile()
    {
        // Limpiar el input file y la lista de imágenes seleccionadas
        if(selectedImages==null && imageDataUrls != null)
        {
            eliminar = true;
            PublicacionActual!.HasImages = false;
        }
        imageDataUrls!.Clear();
        selectedImages = null;
        await JS.InvokeVoidAsync("ClearInput");
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (selectedImages == null && imageDataUrls != null)
        {
            eliminar = true;
            PublicacionActual!.HasImages = false;
        }
        imageDataUrls!.Clear();
        var imageFiles = e.GetMultipleFiles();

        if (imageFiles.Count + imageDataUrls.Count > 5)
        {
            MensajeError = "Solo puedes elegir hasta un máximo de 5 imágenes";
            await ClearInputFile();
            return;
        }

        var format = "image/png";
        selectedImages = imageFiles;

        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }

    }

    public async Task Modificar(EditContext editContext)
    {
        List<Imagen> imagenes = new();
        bool result;

        if (selectedImages != null)
        {
            try
            {
                foreach (var file in selectedImages!)
                {
                    var timestamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    var fileExtension = Path.GetExtension(file.Name);
                    var fileName = $"{timestamp}{fileExtension}";

                    if (file.Size > 512 * 1000)
                    {
                        MensajeError = "El tamaño de cada imagen no debe superar los 500kb";
                        return;
                    }

                    Stream stream = file.OpenReadStream();
                    var path = Path.Combine(Environment.WebRootPath, "images", fileName);
                    await using var fs = new FileStream(path, FileMode.Create);
                    await stream.CopyToAsync(fs);

                    var imagen = new Imagen { FotoUrl = fileName };
                    imagenes.Add(imagen);
                }
                result = true;
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", ex.ToString());
                result = false;
            }
        }
        else
        {
            result = false;

        }

        PublicacionActual!.Nombre = Modelo.Nombre;
        PublicacionActual!.Descripcion = Modelo.Descripcion;
        PublicacionActual!.CategoriaId = Modelo.CategoriaId;
        PublicacionActual!.SucursalId = Modelo.SucursalId;

        if (imageDataUrls.Count() != 0)
        {
            PublicacionActual!.HasImages = true;
        } 
        else
        {
            PublicacionActual!.HasImages = false;
        }

        await PublicacionService.OverwritePublicacionById(PublicacionActual!);

        if (eliminar)
        {
            await ImagenService.BajaImagenesPorIdPublicacion(PublicacionId);
        }

        if (result)
        {
            foreach (var img in imagenes)
            {
                img.PublicacionId = PublicacionId;
            }
            await ImagenService.AltaImagenes(imagenes);
        }

    }
}