@page "/empleados"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject IServiciosUsuario UsuarioService
@inject NavigationManager NavManager
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Empleados</PageTitle>

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Empleados</h1>
        <h2 style="text-align:center">Modificar Empleados</h2>
        <hr />
        <div class="form-floating mb-3">
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (empleados.Count == 0)
                {
                    <div class="alert alert-warning" role="alert">
                        No hay empleados para mostrar...
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <!-- Añade esta clase para hacer la tabla responsiva -->
                        <table class="table table-bordered caption-top">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Nombre</th>
                                    <th>Apellido</th>
                                    <th>Sucursal</th>
                                    <th style="min-width: 120px;"></th> <!-- Utiliza min-width para asegurar un ancho mínimo -->
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var emp in empleados)
                                {
                                    context.Entry(emp).Reference(p => p.Sucursal).Load();
                                    <tr class="table-secondary">
                                        <td>@emp.Id</td>
                                        <td>@emp.Nombre</td>
                                        <td>@emp.Apellido</td>
                                        <td>@emp.Sucursal!.Nombre</td>
                                        <td style="text-align: right;">
                                            <div class="d-flex justify-content-end">
                                                <div class="btn-group" style="margin-right: 1rem;">
                                                    <button class="btn btn-danger rounded" @onclick="@(() => BorrarEmpleado(@emp.Id))">Eliminar</button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                }
            }
        </div>
        <button class="w-30 btn btn-lg btn-dark d-block mx-auto text-center" onclick="@(()=>redirigirANuevoEmpleado())">Nuevo Empleado</button>
    </div>
</div>

<div class="modal fade" data-bs-backdrop='static' tabindex="-1" role="dialog" id="ModalMensaje">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Eliminar Empleado</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(()=> recargarPagina())"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-success" role="alert">
                    Empleado eliminado exitosamente !
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleModal() {
        bootstrap.Modal.getOrCreateInstance("#ModalMensaje").toggle();
    }
    function refreshPage() {
        location.reload();
    }
</script>
@code {

    List<Usuario> empleados = new List<Usuario>();

    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        empleados = await UsuarioService.ReadAllNotDeletedEmpleados(); //LECTURA DE TODAS los empleados
        cargando = false;
    }

    private void redirigirANuevoEmpleado()
    {
        NavManager.NavigateTo("/nuevoempleado");
    }
    private async void BorrarEmpleado(int empleadoId)
    {
        var empleadoElegido = await UsuarioService.FindEmpleado(empleadoId);
        empleadoElegido.Deleted = true;
        await UsuarioService.OverwriteUsuarioById(empleadoElegido);
        try // necesaria por un problema del iterops de javascript
        {
            await JS.InvokeVoidAsync("toggleModal");
        }
        catch (Exception e)           // ignorar
        {
        }

    }
    private async void recargarPagina()
    {
        await JS.InvokeVoidAsync("refreshPage");
    }
}
