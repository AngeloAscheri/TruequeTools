@page "/buscar"

@using Microsoft.EntityFrameworkCore
@using TruequeTools.Data
@using TruequeTools.Entities
@using Microsoft.AspNetCore.Mvc;
@using System.Linq;

@inject TruequeToolsDataContext context
@inject NavigationManager NavMan
@inject IServiciosPublicacion PublicacionService
@inject IServiciosCategoria CategoriaService

@attribute [Authorize(Roles = "Admin,User")]

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <h1 style="text-align:center">Buscar</h1>
        <h2 style="text-align:center">Encontrar el producto ideal</h2>
        <hr />
        <form method="get" @onsubmit="BuscarPublicaciones">
            <div class="form-floating mb-3">
                <InputText @bind-Value="searchString" class="form-control" autocomplete="off" aria-required="true" placeholder="" maxlength="50" />
                <label for="buscar">Buscar</label>
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="selectedFilter" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                    <option value="0">No filtrar por categoria</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.Id">@cat.Nombre</option>
                    }
                </InputSelect>
                <label for="categoria">Categoria</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-dark">Buscar</button>
        </form>
    </div>
</div>

@if (showSpinner)
{
    <div class="d-flex justify-content-center" style="margin:1rem">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}

@if (busquedaRealizada && !showSpinner)
{
    @if (publicaciones != null && publicaciones.Any())
    {
        <h3 class="text-center" style="margin:1rem">Mostrando @publicaciones.Count publicaciones</h3>
        <div class="row margin:1rem">
            @foreach (var publi in publicaciones)
            {
                context.Entry(publi).Reference(p => p.Categoria).Load();
                context.Entry(publi).Reference(p => p.Sucursal).Load(); //Traigo los datos de la sucursal asociada con la publicacion

                <div class="col-lg-4 col-md-6 col-12 mb-3">
                    <div class="card" style="margin:1rem">
                        @if (@publi.HasImages)
                        {
                            context.Entry(publi).Collection(p => p.Imagenes!).Load(); @*Traigo las Imagenes de la Publicacion*@
                            var primeraImagen = publi.Imagenes!.FirstOrDefault();
                            <img class="card-img-top" src="images/@primeraImagen!.FotoUrl" alt="Foto del Producto">
                        }
                        else
                        {
                            <img class="card-img-top-svg" src=resources/blank.svg alt="Foto del Producto">                       
                        }
                        <div class="card-body">
                            <h4 style="margin:0">@publi.Nombre</h4>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">Sucursal: @publi.Sucursal!.Nombre</li>
                            <li class="list-group-item">Categoria: @publi.Categoria!.Nombre</li>
                        </ul>
                        <div class="card-body">
                            <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(publi.Id))">Ver Publicacion</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <h3 class="text-center" style="margin:1rem">No se encontraron resultados...</h3>
    }
}

@code {
    string? searchString;
    int selectedFilter;
    bool busquedaRealizada = false;
    bool showSpinner = false;
    List<Publicacion> publicaciones = new List<Publicacion>();
    List<Categoria> categorias = new List<Categoria>();

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
    }

    void VerPublicacion(int id)
    {
        NavMan.NavigateTo($"/publicacion/{id}");
    }

    protected async Task BuscarPublicaciones()
    {
        showSpinner = true;
        await Task.Delay(500);
        if(String.IsNullOrEmpty(searchString)){
            publicaciones = await PublicacionService.ReadAllPublicaciones();
        }
        else
        {
            publicaciones = await PublicacionService.ReadPublicacionesByNombre(searchString);
        }
        if (selectedFilter != 0)
        {
            publicaciones = publicaciones
            .Where(publicacion => publicacion.Nombre != null && publicacion.CategoriaId == selectedFilter)
            .ToList();
        }
        busquedaRealizada = true;
        showSpinner = false;
        StateHasChanged();
    }

}
