@page "/misPublicaciones"

@using Microsoft.EntityFrameworkCore
@using TruequeTools.Data
@using TruequeTools.Entities
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TruequeToolsDataContext context
@inject NavigationManager NavMan
@inject IServiciosPublicacion PublicacionService

@attribute [Authorize(Roles = "Admin,User")]

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (showSpinner)
{
    <div class="d-flex justify-content-center" style="margin:1rem">
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    if(publicaciones.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            No tienes publicaciones propias...
        </div>
    }
    else
    {
        <PublicacionTarjeta ListaPublicaciones="publicaciones" />
    }  
}

@code {

    List<Publicacion> publicaciones = new List<Publicacion>();
    private ClaimsPrincipal? user;
    bool showSpinner = false;

    protected override async Task OnInitializedAsync()
    {
        showSpinner = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var usuario = int.Parse(user.FindFirst("UsuarioId")!.Value);
            publicaciones = await PublicacionService.ReadAllPublicacionesActivasCurrentUser(usuario);
        }
        publicaciones.Sort((x, y) => y.IsPremium.CompareTo(x.IsPremium)); //Traigo las premium primero
        await Task.Delay(500); // Espera 0.5 segundos y muestra el spinner durante ese tiempo
        showSpinner = false; // Desactiva el spinner
        StateHasChanged(); // Notifica a Blazor que debe actualizar la interfaz de usuario
    }

    void VerPublicacion(int id)
    {
        NavMan.NavigateTo($"/publicacion/{id}");
    }

}
