@page "/modificar"

@using TruequeTools.Entities

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject IServiciosUsuario UsuarioService
@inject IServiciosSucursal SucursalService
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User,Employee")]

<ul class="list-group">
    @if (exito)
    {
		<div>
			<div class="alert alert-success" role="alert">
				Se guardaron los cambios!
			</div>
		</div>
    }
    else
    {
		<div class="row">
			<EditForm Model="@Modelo" OnValidSubmit="HandleSubmit" FormName="UsuarioFrom">
				<DataAnnotationsValidator />
				<ValidationSummary class="text-danger" role="alert" />
				@if (!string.IsNullOrEmpty(MensajeError))
				{
					<div class="alert alert-danger mt-3" role="alert">
						@MensajeError
					</div>
				}
				<div class="form-floating mb-3">
					<InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="nombre" aria-required="true" placeholder="" maxlength="50" />
					<label for="nombre">Nombre</label>
					<ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputText @bind-Value="Modelo.Apellido" class="form-control" autocomplete="apellido" aria-required="true" placeholder="" maxlength="50" />
					<label for="apellido">Apellido</label>
					<ValidationMessage For="() => Modelo.Apellido" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputDate @bind-Value="Modelo.FechaNacimiento" class="form-control" autocomplete="fecha-nacimiento" aria-required="true" placeholder="" maxlength="50" />
					<label for="fecha-nacimiento">Fecha de Nacimiento</label>
					<ValidationMessage For="() => Modelo.FechaNacimiento" class="text-danger" />
				</div>
				<div class="form-floating mb-3">
					<InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
						@foreach (var suc in sucursales)
						{
							<option value="@suc.Id">@suc.Nombre</option>
						}
					</InputSelect>
					<label for="sucursal">Sucursal</label>
					<ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
				</div>
				<button type="submit" class="w-100 btn btn-lg btn-dark">Guardar</button>
			</EditForm>
		</div>
    }
</ul>


<script>
    function refreshPage() {
        location.reload();
    }
</script>

@code {

	[SupplyParameterFromForm]
	public UsuarioViewModel Modelo { get; set; } = new();

	List<Sucursal> sucursales = new List<Sucursal>();
	Usuario usuarioActual = new Usuario();

	string? MensajeError;
	public bool exito = false;
	public int UserId;
	public int SucursalId;

	protected override async Task OnParametersSetAsync()
	{
		sucursales = await SucursalService.ReadAllSucursales();

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value);
		usuarioActual = await UsuarioService.ReadUsuarioById((int)UserId!);
		SucursalId = usuarioActual.SucursalId;

		Modelo.Nombre = usuarioActual.Nombre!;
		Modelo.Apellido = usuarioActual.Apellido!;
		Modelo.SucursalId = SucursalId;
		Modelo.FechaNacimiento = usuarioActual.FechaNacimiento!;

	} 

	public async Task HandleSubmit()
	{
		try
		{
			usuarioActual.Nombre = Modelo.Nombre;
			usuarioActual.Apellido = Modelo.Apellido;
			usuarioActual.FechaNacimiento = Modelo.FechaNacimiento;
			usuarioActual.SucursalId = Modelo.SucursalId;

			await UsuarioService.OverwriteUsuarioById(usuarioActual);

			exito = true;
			await JS.InvokeVoidAsync("refreshPage");
		}
		catch (Exception ex)
		{
			await JS.InvokeVoidAsync("alert", ex.ToString());
		}

	}

}
