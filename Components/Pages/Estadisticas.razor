@page "/estadisticas"

@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using TruequeTools.Entities
@using TruequeTools.Data
@using TruequeTools.Components.Resources

@inject IJSRuntime JS
@inject TruequeToolsDataContext context
@inject IServiciosTrueque TruequeService
@inject IServiciosSucursal SucursalService
@inject IServiciosProducto ProductoService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin")]

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border" style="margin-bottom:1.1rem">
        <div class="form-floating mb-3">
            <InputDate @bind-Value="@fechaInicio" class="form-control" aria-required="true" placeholder="" maxlength="50" />
            <label for="fecha-inicio">Inicio</label>
        </div>
        <div class="form-floating mb-3">
            <InputDate @bind-Value="@fechaFin" class="form-control" aria-required="true" placeholder="" maxlength="50" />
            <label for="fecha-fin">Fin</label>
        </div>
        <div class="form-floating mb-3">
            <InputSelect @bind-Value="@sucursalActual" class="form-control" aria-required="true" placeholder="" maxlength="50">
                <option value=0>Todas las sucursales</option>
                @foreach (var cat in sucursales)
                {
                    <option value="@cat.Id">@cat.Nombre</option>
                }
            </InputSelect>
            <label for="sucursal">Sucursal</label>
        </div>
        <button type="button" class="w-100 btn btn-lg btn-dark" @onclick="ActualizarEstadisticasClick">Filtrar</button>
    </div>
    <div class="col-lg-12 pt-4 pb-4 border" style="margin-bottom:1.1rem">
        <h1 style="text-align:center">Estadisticas</h1>
        <h3 style="text-align:center">Desde el @fechaInicioTitulo.ToString("dd/MM/yyyy") al @fechaFinTitulo.ToString("dd/MM/yyyy") @nombreSucursal</h3>
        <hr />
        <div class="form-floating mb-3">
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (autorizado)
                {
                    <div class="container">
                        <div class="row">
                            <div class="col-6">
                                <Chart Config="config1"></Chart>
                            </div>
                            <div class="col-6">
                                <Chart Config="config2"></Chart>
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-12">
                                <h6 style="text-align:center">El <b>monto total</b> de ventas por trueques es de $@total</h6>
                                <h6 style="text-align:center">El <b>monto promedio</b> de ventas por trueques es de $@((int)promedio)</h6>
                            </div>
                        </div>
                        <div class="row"> 
                            <div class="col-12">
                                <div class="table-responsive">
                                    <!-- Añade esta clase para hacer la tabla responsiva -->
                                    @if(mostrarTopSucursales){
                                        <table class="table table-bordered caption-top">
                                            <caption>Top 3 Sucursales</caption>
                                            <thead>
                                                <tr>    
                                                    <th>Sucursal</th>
                                                    <th>Total de Ventas por Trueques</th>                         
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var suc in topSucursales)
                                                {     
                                                    <tr class="table-secondary">
                                                        <td>@suc.Sucursal.Nombre</td>
                                                        <td>$@suc.TotalVentas</td>                                                     
                                                    </tr>                                  
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <div class="table-responsive">
                                    <!-- Añade esta clase para hacer la tabla responsiva -->
                                    @if (truequesCompletados.Count() != 0)
                                    {
                                        <table class="table table-bordered caption-top">
                                            <caption>Trueques con Ventas</caption>
                                            <thead>
                                                <tr>
                                                    <th>Id</th>
                                                    <th>Sucursal</th>
                                                    <th>Fecha y Hora</th>
                                                    <th>Comentarios</th>
                                                    <th>Monto</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                    @foreach (var t in truequesCompletados)
                                                    {
                                                        var estilo = "table-success";
                                                        var comentario = "Trueque completado con";
                                                        montoPorTrueque(t.Id);

                                                        context.Entry(t).Reference(p => p.Oferta).Load();
                                                        context.Entry(t.Oferta!).Reference(p => p.PublicacionQueOfrezco).Load();
                                                        context.Entry(t.Oferta!).Reference(p => p.PublicacionQueOferto).Load();
                                                        context.Entry(t.Oferta!.PublicacionQueOferto!).Reference(p => p.Sucursal).Load();
                                                        <tr class="@estilo">
                                                            <td>@t.Id</td>
                                                            <td>@t.Oferta!.PublicacionQueOferto!.Sucursal!.Nombre</td>
                                                            <td>@t.Oferta!.Fecha.ToShortDateString() @t.Oferta!.Fecha.ToShortTimeString()</td>
                                                            <td>
                                                                @comentario
                                                                <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalProductos" @onclick="@(() =>VerProductos(t.Id))">
                                                                    ventas
                                                                </NavLink>
                                                            </td>
                                                            <td>$@totalTrueque</td>
                                                        </tr>
                                                    }
                                            </tbody>
                                        </table>
                                    }                                 
                                </div>
                            </div>
                        </div>
                    </div>                                                       
                }
                else
                {
                    <div class="alert alert-warning" role="alert">
                        No hay datos para mostrar...
                    </div>       
                }
            }
        </div> 
    </div>
</div>

<div class="modal fade" id="FechaInvalidaModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Fechas invalidas</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if(fechaInicio > fechaFin){
                    <div class="alert alert-danger" role="alert">
                        La fecha de inicio no puede ser posterior a la fecha de fin !
                    </div>
                }
                @if (fechaFin > DateTime.Today.AddHours(23).AddMinutes(59))
                {
                    <div class="alert alert-danger" role="alert">
                        La fecha de fin no puede ser posterior a la fecha de hoy !
                    </div>
                }
                @if (fechaInicio < fechaCreacion)
                    {
                    <div class="alert alert-danger" role="alert">
                        La fecha de inicio no puede ser anterior a la fecha de creacion !
                        Fecha creacion: @fechaCreacion.ToString("dd/MM/yyyy")
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function toggleModalError() {
        bootstrap.Modal.getOrCreateInstance("#FechaInvalidaModal").toggle();
    }
</script>

<script>
    function refreshPage() {
        location.reload();
    }
</script>

<ProductosModal TruequeId="TruequeId" Productos="productos" />

@code {

    List<Trueque> trueques = new List<Trueque>();
    List<Trueque> truequesCompletados = new List<Trueque>();
    List<Sucursal> sucursales = new List<Sucursal>();
    List<Producto> productos = new List<Producto>();
    List<(Sucursal Sucursal, double TotalVentas)> topSucursales = new List<(Sucursal, double)>();

    private PieConfig? config1;
    private PieConfig? config2;
    bool cargando = true;
    bool autorizado = false;
    double total;
    double totalTrueque;
    double promedio;

    DateTime fechaCreacion = new DateTime(2024, 2, 29);
    DateTime fechaInicioTitulo = new DateTime(2024, 2, 29);
    DateTime fechaFinTitulo = DateTime.Today;
    DateTime fechaInicio = new DateTime(2024, 2, 29);
    DateTime fechaFin = DateTime.Today;
    int sucursalActual = 0;
    bool mostrarTopSucursales = true;

    int TruequeId;
    string? nombreSucursal="de todas las sucursales";
    Publicacion publicacion = new();

    protected override async Task OnInitializedAsync()
    {
        sucursales = await SucursalService.ReadAllSucursales();
        await ActualizarEstadisticas();
    }

    private async Task ActualizarEstadisticas()
    {
        topSucursales.Clear();
        await Task.Delay(500);

        if (sucursalActual == 0)
        {
            mostrarTopSucursales = true;
            nombreSucursal="de todas las sucursales";
            trueques = await TruequeService.ReadTruequesEntreFechas(fechaInicio, fechaFin.AddHours(23).AddMinutes(59));
            truequesCompletados = await TruequeService.ReadTruequesEntreFechasConVentas(fechaInicio, fechaFin.AddHours(23).AddMinutes(59));
            await EstadisticasTodasLasSucursales();
        }
        else
        {
            mostrarTopSucursales = false;
            var sucu = await SucursalService.ReadSucursalById(sucursalActual);
            nombreSucursal = "de la sucursal " + sucu.Nombre;
            trueques = await TruequeService.ReadTruequesEntreFechasYSucursal(fechaInicio, fechaFin.AddHours(23).AddMinutes(59), sucursalActual);
            truequesCompletados = await TruequeService.ReadTruequesEntreFechasYSucursalConVentas(fechaInicio, fechaFin.AddHours(23).AddMinutes(59), sucursalActual);
            await EstadisticasPorSucursal();
        }
        
        if (trueques.Any(t => t.Estado == 1 || t.Estado == -1))
        {
            autorizado = true;
        }
        else
        {
            autorizado = false;
        }

        SetChart1();
        SetChart2();

        cargando = false;
    }

    private async Task EstadisticasTodasLasSucursales()
    {

        if(trueques.Count != 0)
        {
            if(trueques.Any(t => t.HasVentas == true))
            {
                total = await TruequeService.GetTotalVentas(fechaInicio, fechaFin.AddHours(23).AddMinutes(59));
                promedio = await TruequeService.GetPromedioVentas(fechaInicio, fechaFin.AddHours(23).AddMinutes(59));

                foreach(var suc in sucursales)
                {
                    double totalVentas = await TruequeService.GetTotalVentasSucursal(suc.Id, fechaInicio, fechaFin.AddHours(23).AddMinutes(59));
                    topSucursales.Add((suc, totalVentas));
                }
                topSucursales = topSucursales.OrderByDescending(s => s.TotalVentas).Take(3).ToList();     
            }
            else
            {
                total = 0;
                promedio = 0;
                foreach(var suc in sucursales)
                {
                    double totalVentas = 0;
                    topSucursales.Add((suc, totalVentas));
                }
                topSucursales = topSucursales.OrderByDescending(s => s.TotalVentas).Take(3).ToList();
            }

        }   
    }

    private async Task EstadisticasPorSucursal()
    {
        if(trueques.Count != 0)
        {
            if(trueques.Any(t => t.HasVentas == true))
            {
                total = await TruequeService.GetTotalVentasSucursal(sucursalActual, fechaInicio, fechaFin.AddHours(23).AddMinutes(59));
                promedio = await TruequeService.GetPromedioVentasSucursal(sucursalActual, fechaInicio, fechaFin.AddHours(23).AddMinutes(59));
            }
            else
            {
                total = 0;
                promedio = 0;
            }
        }   
    }

    private async Task ActualizarEstadisticasClick()
    {
        if (fechaInicio > fechaFin || fechaInicio > DateTime.Today || fechaFin > DateTime.Today.AddHours(23).AddMinutes(59) || fechaInicio < fechaCreacion || fechaFin < fechaCreacion)
        {
            try
            {
                await JS.InvokeVoidAsync("toggleModalError");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", ex.ToString());            
            }
        }
        else
        {
            fechaInicioTitulo = fechaInicio;
            fechaFinTitulo = fechaFin;
            cargando = true;
            await ActualizarEstadisticas();
        }
    }

    private void SetChart1()
    {
        config1 = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Trueques Totales"
                    }
                }
            };

        foreach (string titulo in new[] { "Completados", "Rechazados" })
        {
            config1.Data.Labels.Add(titulo);
        }

        var totalAceptados = trueques.Where(t => t.Estado == 1).Count();
        var totalRechazados = trueques.Where(t => t.Estado == -1).Count();    

        PieDataset<int> dataset = new PieDataset<int>(new[] { totalAceptados, totalRechazados })
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"              
            }
        };

        config1.Data.Datasets.Add(dataset);
    }

    private void SetChart2()
    {
        config2 = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Trueques Completados"
                    }
                }
            };

        foreach (string titulo in new[] { "Con Ventas", "Sin Ventas" })
        {
            config2.Data.Labels.Add(titulo);
        }

        var totalConVentas = trueques.Where(t => t.HasVentas == true && t.Estado == 1).Count();
        var totalSinVentas = trueques.Where(t => t.HasVentas == false && t.Estado == 1).Count();

        PieDataset<int> dataset = new PieDataset<int>(new[] { totalConVentas, totalSinVentas })
            {
                BackgroundColor = new[]
                {
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            }
            };

        config2.Data.Datasets.Add(dataset);
    }

    private async void VerProductos(int truequeId)
    {
        TruequeId = truequeId;

        try
        {
            productos = await ProductoService.ReadProductosByTruequeId(TruequeId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.ToString());
        }

        StateHasChanged();
    
    }

    private async void montoPorTrueque(int truequeId)
    {
        try
        {
            totalTrueque = await TruequeService.GetMontoVentas(truequeId);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.ToString());
        }
    }
}