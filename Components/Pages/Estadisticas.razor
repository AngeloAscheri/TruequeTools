@page "/estadisticas"

@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using TruequeTools.Entities

@inject IServiciosTrueque TruequeService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin")]

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Estadisticas</h1>
        <h2 style="text-align:center">Conoce tus Rendimientos </h2>
        <hr />
        <div class="form-floating mb-3">
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (trueques.Count == 0)
                {
                    <div class="alert alert-warning" role="alert">
                        No hay datos para mostrar...
                    </div>
                }
                else
                {    
                   <div class="container">
                        <Chart Config="config"></Chart>
                    </div>                                     
                }
            }
        </div> 
    </div>
</div>

@code {

    List<Trueque> trueques = new List<Trueque>();

    private PieConfig? config;
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        trueques = await TruequeService.ReadAllTrueques();
        cargando = false;

        config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Trueques Totales"
                }
            }
        };

        foreach (string titulo in new[] { "Completados", "Rechazados", "Pendientes" })
        {
            config.Data.Labels.Add(titulo);
        }

        var totalAceptados = trueques.Where(t => t.Estado == 1).Count();
        var totalRechazados = trueques.Where(t => t.Estado == -1).Count();
        var totalPendientes = trueques.Where(t => t.Estado == 0).Count();

        PieDataset<int> dataset = new PieDataset<int>(new[] { totalAceptados, totalRechazados, totalPendientes })
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            }
        };

        config.Data.Datasets.Add(dataset);
    }

}
