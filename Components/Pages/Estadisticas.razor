@page "/estadisticas"

@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using TruequeTools.Entities

@inject IServiciosTrueque TruequeService
@inject IServiciosSucursal SucursalService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin")]

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Estadisticas</h1>
        <h2 style="text-align:center">Conoce tus Rendimientos </h2>
        <hr />
        <div class="form-floating mb-3">
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (trueques.Count != 0  && trueques.Any(t => t.HasVentas == true))
                {
                    <div class="container">
                        <div class="row">
                            <div class="col-6">
                                <Chart Config="config1"></Chart>
                            </div>
                            <div class="col-6">
                                <Chart Config="config2"></Chart>
                            </div>
                        </div   
                        <div class="row"> 
                            <div class="col-12">
                                <div class="table-responsive">
                                    <!-- Añade esta clase para hacer la tabla responsiva -->
                                    <table class="table table-bordered caption-top">
                                        <caption>Top 3 Sucursales</caption>
                                        <thead>
                                            <tr>    
                                                <th>Sucursal</th>
                                                <th>Total de Ventas por Trueques</th>                         
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var suc in topSucursales)
                                            {     
                                                <tr class="table-secondary">
                                                    <td>@suc.Sucursal.Nombre</td>
                                                    <td>$@suc.TotalVentas</td>                                                     
                                                </tr>                                  
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row"> 
                            <div class="col-12">
                                <h6 style="text-align:center">El <b>monto total</b> de ventas por trueques es de $@total</h6>
                                <h6 style="text-align:center">El <b>monto promedio</b> de ventas por trueques es de $@promedio</h6>
                            </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-warning" role="alert">
                        No hay datos para mostrar...
                    </div>       
                }
            }
        </div> 
    </div>
</div>

@code {

    List<Trueque> trueques = new List<Trueque>();
    List<Sucursal> sucursales = new List<Sucursal>();
    List<(Sucursal Sucursal, double TotalVentas)> topSucursales = new List<(Sucursal, double)>();

    private PieConfig? config1;
    private PieConfig? config2;
    bool cargando = true;
    double total;
    double promedio;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        trueques = await TruequeService.ReadAllTrueques();
        if(trueques.Count != 0  && trueques.Any(t => t.HasVentas == true))
        {
           sucursales = await SucursalService.ReadAllSucursales();
            total = await TruequeService.GetTotalVentas();
            promedio = await TruequeService.GetPromedioVentas();

            foreach(var suc in sucursales)
            {
                double totalVentas = await TruequeService.GetTotalVentasSucursal(suc.Id);
                topSucursales.Add((suc, totalVentas));
            }
            topSucursales = topSucursales.OrderByDescending(s => s.TotalVentas).Take(3).ToList();      
        }   
        SetChart1(); 
        SetChart2();
        cargando = false;
    }

    private void SetChart1()
    {
        config1 = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Trueques Totales"
                    }
                }
            };

        foreach (string titulo in new[] { "Completados", "Rechazados", "Pendientes" })
        {
            config1.Data.Labels.Add(titulo);
        }

        var totalAceptados = trueques.Where(t => t.Estado == 1).Count();
        var totalRechazados = trueques.Where(t => t.Estado == -1).Count();
        var totalPendientes = trueques.Where(t => t.Estado == 0).Count();

        PieDataset<int> dataset = new PieDataset<int>(new[] { totalAceptados, totalRechazados, totalPendientes })
            {
                BackgroundColor = new[]
                {
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
                ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            }
            };

        config1.Data.Datasets.Add(dataset);
    }

    private void SetChart2()
    {
        config2 = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Trueques Completados"
                    }
                }
            };

        foreach (string titulo in new[] { "Con Ventas", "Sin Ventas" })
        {
            config2.Data.Labels.Add(titulo);
        }

        var totalConVentas = trueques.Where(t => t.HasVentas == true && t.Estado == 1).Count();
        var totalSinVentas = trueques.Where(t => t.HasVentas == false && t.Estado == 1).Count();

        PieDataset<int> dataset = new PieDataset<int>(new[] { totalConVentas, totalSinVentas })
            {
                BackgroundColor = new[]
                {
                ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
                ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            }
            };

        config2.Data.Datasets.Add(dataset);
    }

}
