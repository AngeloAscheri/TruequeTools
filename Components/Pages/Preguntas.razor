@page "/preguntas"

@using TruequeTools.Data
@using TruequeTools.Entities
@using TruequeTools.Components.Resources

@inject TruequeToolsDataContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiciosPregunta PreguntaService
@inject IServiciosPublicacion PublicacionService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Preguntas</h1>
        <hr />
        <div class="form-floating mb-3">
            @if (PreguntasRealizadas.Count > 0)
            {
                <div class="table-responsive">
                    <!-- Añade esta clase para hacer la tabla responsiva -->
                    <table class="table table-bordered caption-top">
                        <caption>Realizadas</caption>
                        <thead>
                            <tr>
                                <th>Publicacion</th>
                                <th>Pregunta</th>
                                <th>Respuesta</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var realizada in PreguntasRealizadas)
                            {                               
                                var estilo = "";
                             
                                @if (realizada.Respuesta == null)
                                {
                                    estilo = "table-secondary";   
                                }
                                else
                                {
                                    estilo = "table-success";
                                }
                                <tr class="@estilo">
                                    <td>@realizada?.Publicacion!.Nombre</td>
                                    <td>@realizada?.Texto</td>
                                    @if (realizada!.Respuesta == null)
                                    {
                                        <td>Esperando respuesta...</td>
                                    }
                                    else
                                    {
                                        <td>@realizada?.Respuesta</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No hay preguntas realizadas para mostrar...
                </div>
            }
        </div>
        <hr />
        <div class="form-floating mb-3">
            @if (PreguntasRecibidas.Count > 0)
            {
                <div class="table-responsive">
                    <!-- Añade esta clase para hacer la tabla responsiva -->
                    <table class="table table-bordered caption-top">
                        <caption>Recibidas</caption>
                        <thead>
                            <tr>
                                <th>Publicacion</th>
                                <th>Pregunta</th>
                                <th>Respuesta</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var recibida in PreguntasRecibidas)
                            {
                                var estilo = "";

                                @if (recibida.Respuesta == null)
                                {
                                    estilo = "table-secondary";
                                }
                                else
                                {
                                    estilo = "table-success";
                                }
                                <tr class="@estilo">
                                    <td>@recibida?.Publicacion!.Nombre</td>
                                    <td>@recibida?.Texto</td>
                                    @if (recibida!.Respuesta == null)
                                    {
                                        <td style="text-align: right;">
                                            <div class="d-flex justify-content-end">
                                                <div class="btn-group" style="margin-right: 1rem;">
                                                    <button class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#ModalResponder" @onclick="@(() =>Responder(recibida.Id, recibida.PublicacionId, recibida.Texto!))">Responder</button>
                                                </div>
                                            </div>
                                        </td>
                                    }
                                    else
                                    {
                                        <td>@recibida?.Respuesta</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No hay preguntas recibidas para mostrar...
                </div>
            }
        </div>
    </div>
</div>

<Responder 
    PreguntaId="PreguntaId"
    PublicacionId="PublicacionId"
    PreguntaText=@PreguntaText/> @*MODAL CON LA FUNCION RESPONDER*@

@code {

    List<Pregunta> PreguntasRealizadas { get; set; } = new();
    List<Pregunta> PreguntasRecibidas { get; set; } = new();

    int PreguntaId { get; set; }
    int PublicacionId { get; set; }
    string? PreguntaText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value); //TRAIGO EL ID DEL USUARIO

        List<Publicacion> UserPublicaciones = await PublicacionService.ReadAllPublicacionesCurrentUser(UserId);

        PreguntasRealizadas = await PreguntaService.ReadAllPreguntasRealizadasByUser(UserId);

        foreach (var publi in UserPublicaciones)
        {
            if(publi.Deleted == false)
            {
                await context.Entry(publi).Collection(p => p.Preguntas!).LoadAsync();
                foreach (var oferta in publi.Preguntas!)
                {
                    PreguntasRecibidas.Add(oferta);
                }
            }   
        }

        // Ordenar OfertasRealizadas en orden descendente por estado
        PreguntasRealizadas = PreguntasRealizadas.OrderByDescending(oferta => oferta.Respuesta == null).ToList();

        // Ordenar OfertasRecibidas en orden descendente por estado
        PreguntasRecibidas = PreguntasRecibidas.OrderByDescending(oferta => oferta.Respuesta == null).ToList();


    }

    void Responder(int preguntaId, int publicacionId, string preguntaTexto)
    {
        PreguntaId = preguntaId;
        PublicacionId = publicacionId;
        PreguntaText = preguntaTexto;
    }

}
