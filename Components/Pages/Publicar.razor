@page "/publicar"

@using System.IO;
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using System.Security.Claims
@using TruequeTools.Data
@using TruequeTools.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment
@inject IWebHostEnvironment WebHostEnv
@inject IServiciosSucursal SucursalService
@inject IServiciosCategoria CategoriaService
@inject IServiciosPublicacion PublicacionService
@inject IServiciosImagen ImagenService
@inject IJSRuntime JS

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Publicar</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border" style="margin-bottom:1.1rem">
        <h1 style="text-align:center">Publicar</h1>
        <EditForm Model="@Modelo" enctype="multipart/form-data" OnValidSubmit="CargarPublicacion" FormName="CargarPublicacionForm">
            <DataAnnotationsValidator />
            <h2 style="text-align:center">Dar a conocer tu producto</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @MensajeError
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                <label for="nombre">Nombre del producto</label>
                <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                <label for="descripcion">Descripcion del producto</label>
                <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                    @foreach (var suc in sucursales)
                    {
                        <option value="@suc.Id">@suc.Nombre</option>
                    }
                </InputSelect>
                <label for="sucursal">Sucursal</label>
                <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                    <option value=0>Seleccione una categoría</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.Id">@cat.Nombre</option>
                    }
                </InputSelect>
                <label for="categoria">Categoria</label>
                <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
            </div>
            <hr />
            @***********NACHO - MANEJO DE IMAGENES***********@
            <label for="foto">Fotos (opcional)</label>
            <div class="form-floating mb-3">
                <div>
                    <InputFile id="fileInput" multiple OnChange="OnInputFileChange" accept="image/*" class="form-control" />          
                </div>
                <ValidationMessage For="() => Modelo.FileSize" class="text-danger" />
                <ValidationMessage For="() => Modelo.CantidadImagenes" class="text-danger" />
            </div>
            @if (selectedImages != null)
            {
                <div class="form-floating mb-3">
                    <button type="button" class="btn btn-danger mt-2 d-block mx-auto text-center" @onclick="ClearInputFile">Limpiar</button>
                </div>
                <div class="table-responsive" style="display:flex; justify-content:center">
                    <table class="table table-bordered" style="text-align:center">
                        <tr>
                            @foreach (var imageDataUrl in imageDataUrls)
                            {
                                <td>
                                    <img src="@imageDataUrl" />
                                </td>
                            }
                        </tr>
                    </table>
                </div>
            }
            @***********NACHO - MANEJO DE IMAGENES***********@
            <button type="submit" class="w-100 btn btn-lg btn-dark">Crear Publicacion</button>
        </EditForm>
    </div>
</div>

<script>
    function ClearInput() {
        var input = document.getElementById("fileInput");
        input.value = ''; // Limpiar el valor del input
    }
</script>

@code {

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    List<Sucursal> sucursales = new List<Sucursal>();
    List<Categoria> categorias = new List<Categoria>();

    private String? MensajeError;
    private ClaimsPrincipal? user;
    int sucursalPreferidaId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        sucursales = await SucursalService.ReadAllSucursales(); //LECTURA DE TODAS LAS SUCURSALES
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
        sucursalPreferidaId = int.Parse(user!.FindFirst("SucursalId")!.Value);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Modelo.SucursalId = sucursalPreferidaId; // Configurar el modelo de vista con la sucursal preferida del usuario
    }

    @***********NACHO - MANEJO DE IMAGENES***********@
    IList<string> imageDataUrls = new List<string>();
    IReadOnlyList<IBrowserFile>? selectedImages;

    void ClearInputFile()
    {
        // Limpiar el input file y la lista de imágenes seleccionadas
        imageDataUrls.Clear();
        selectedImages = null;
        JS.InvokeVoidAsync("ClearInput");
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        imageDataUrls.Clear();
        var imageFiles = e.GetMultipleFiles();
        Modelo.CantidadImagenes = imageDataUrls.Count;

        if (imageFiles.Count + imageDataUrls.Count > 5)
        {
            ClearInputFile();
            MensajeError = "Solo puedes elegir hasta un máximo de 5 imágenes";
            return;
        }

        var format = "image/png";
        selectedImages = imageFiles;

        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
    }

    @***********NACHO - MANEJO DE IMAGENES***********@

    public async Task CargarPublicacion(EditContext editContext)
    {
        //**********NACHO - MANEJO DE IMAGENES***********
        List<Imagen> imagenes = new();
        bool result;

        if (selectedImages != null)
        {
            try
            {
                foreach (var file in selectedImages!)
                {
                    var timestamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    var fileExtension = Path.GetExtension(file.Name);
                    var fileName = $"{timestamp}{fileExtension}";

                    if (file.Size > 512 * 1000)
                    {
                        MensajeError = "El tamaño de cada imagen no debe superar los 500kb";
                        return;
                    }

                    Stream stream = file.OpenReadStream();
                    var path = Path.Combine(Environment.WebRootPath, "images", fileName);
                    await using var fs = new FileStream(path, FileMode.Create);
                    await stream.CopyToAsync(fs);

                    var imagen = new Imagen { FotoUrl = fileName };
                    imagenes.Add(imagen);
                }
                result = true;
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", ex.ToString());
                result = false;
            }
        }
        else
        {
            result = false;
        }
        //**********NACHO - MANEJO DE IMAGENES***********

        var publicacion = new Publicacion
            {
                Nombre = Modelo.Nombre,
                Descripcion = Modelo.Descripcion,
                CategoriaId = Modelo.CategoriaId,
                UsuarioId = int.Parse(user!.FindFirst("UsuarioId")!.Value),
                HasImages = result,
                SucursalId = Modelo.SucursalId
            };

        int publicacionID = await PublicacionService.CreatePublicacion(publicacion);

        //**********NACHO - MANEJO DE IMAGENES***********
        if (result)
        {
            foreach (var img in imagenes)
            {
                img.PublicacionId = publicacionID;
            }
            await ImagenService.AltaImagenes(imagenes);
        }
        //**********NACHO - MANEJO DE IMAGENES***********

        NavMan.NavigateTo("/");

    }

}

