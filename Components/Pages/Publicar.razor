@page "/publicar"

@using System.IO;
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using System.Security.Claims
@using TruequeTools.Data
@using TruequeTools.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment Environment
@inject IWebHostEnvironment WebHostEnv
@inject IServiciosSucursal SucursalService
@inject IServiciosCategoria CategoriaService
@inject IServiciosPublicacion PublicacionService
@inject IServiciosImagen ImagenService
@inject IJSRuntime JS

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Publicar</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border" style="margin-bottom:1.1rem">
        <h1 style="text-align:center">Publicar</h1>
        <EditForm Model="@Modelo" enctype="multipart/form-data" OnValidSubmit ="CargarPublicacion" FormName="CargarPublicacionForm">
            <DataAnnotationsValidator />
            <h2 style="text-align:center">Dar a conocer tu producto</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @MensajeError
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                <label for="nombre">Nombre del producto</label>
                <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                <label for="descripcion">Descripcion del producto</label>
                <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                    @foreach (var suc in sucursales)
                    {
                        <option value="@suc.Id">@suc.Nombre</option>
                    }
                </InputSelect>
                <label for="sucursal">Sucursal</label>
                <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                    <option value=0>Seleccione una categoría</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.Id">@cat.Nombre</option>
                    }
                </InputSelect>
                <label for="categoria">Categoria</label>
                <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
            </div>
            <hr />
            @***********NACHO - MANEJO DE IMAGENES***********@
            <label for="foto">Foto (opcional)</label>
            <div class="form-floating mb-3">
                <div>
                    <InputFile multiple OnChange="OnInputFileChange" accept="image/*" class="form-control" />
                </div>    
            </div>
            <ValidationMessage For="() => Modelo.FileSize" class="text-danger" />
            <div class="image-list">
                <table class="table table-bordered">
                    <tr>
                        @foreach (var imageDataUrl in imageDataUrls)
                        {
                            <td>
                                <img src="@imageDataUrl" />
                                <button class="btn btn-danger" style="background-color: red;" type="button" @onclick="() => RemoveImage(imageDataUrl)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                        <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                    </svg>
                                </button>
                            </td>
                        }
                    </tr>
                </table>
            </div>
            @***********NACHO - MANEJO DE IMAGENES***********@
            <button type="submit" class="w-100 btn btn-lg btn-dark">Crear Publicacion</button>
        </EditForm>
    </div>
</div>

@code {

    @***********NACHO - MANEJO DE IMAGENES***********@
    IList<string> imageDataUrls = new List<string>();
    IReadOnlyList<IBrowserFile>? selectedImages;

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();

        if (imageFiles.Count + imageDataUrls.Count > 5)
        {
            MensajeError = "Solo puedes elegir hasta un máximo de 5 imágenes";
            return;
        }

        var format = "image/png";
        selectedImages = imageFiles;

        foreach (var imageFile in imageFiles)
        {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);

            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imageDataUrls.Add(imageDataUrl);
        }
    }

    void RemoveImage(string imageDataUrl)
    {
        // Encuentra el índice de la imagen en la lista de URL de imágenes
        var index = imageDataUrls.IndexOf(imageDataUrl);
        if (index != -1)
        {
            // Elimina la imagen de la lista de URL de imágenes
            imageDataUrls.RemoveAt(index);

            // Si también hay una imagen seleccionada correspondiente, elimínala también
            if (selectedImages != null && selectedImages.Count > index)
            {
                selectedImages = selectedImages.Where((_, i) => i != index).ToList();
            }
        }
    }
    @***********NACHO - MANEJO DE IMAGENES***********@

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    List<Sucursal> sucursales = new List<Sucursal>();
    List<Categoria> categorias = new List<Categoria>();

    private String? MensajeError;
    private ClaimsPrincipal? user;
    int sucursalPreferidaId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        sucursales = await SucursalService.ReadAllSucursales(); //LECTURA DE TODAS LAS SUCURSALES
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
        sucursalPreferidaId = int.Parse(user!.FindFirst("SucursalId")!.Value);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Modelo.SucursalId = sucursalPreferidaId; // Configurar el modelo de vista con la sucursal preferida del usuario
    }

    public async Task CargarPublicacion(EditContext editContext)
    {   

        var publicacion = new Publicacion
        {
            Nombre = Modelo.Nombre,
            Descripcion = Modelo.Descripcion,
            CategoriaId = Modelo.CategoriaId,
            UsuarioId = int.Parse(user!.FindFirst("UsuarioId")!.Value),
            HasImages = (selectedImages != null), //**********NACHO - MANEJO DE IMAGENES***********
            SucursalId = Modelo.SucursalId
        };

        int publicacionID = await PublicacionService.CreatePublicacion(publicacion);

        //**********NACHO - MANEJO DE IMAGENES***********
        if (publicacion.HasImages)
        {
            List<Imagen> imagenes = new();

            foreach (var file in selectedImages!)
            {
                var timestamp = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                var fileExtension = Path.GetExtension(file.Name);
                var fileName = $"{timestamp}{fileExtension}";

                Stream stream = file.OpenReadStream();
                var path = Path.Combine(Environment.WebRootPath, "images", fileName);
                await using var fs = new FileStream(path, FileMode.Create);
                await stream.CopyToAsync(fs);

                var imagen = new Imagen
                {
                    PublicacionId = publicacionID,
                    FotoUrl = fileName,
                };

                imagenes.Add(imagen);

            }
           
            await ImagenService.AltaImagenes(imagenes);
        }
        //**********NACHO - MANEJO DE IMAGENES***********

        NavMan.NavigateTo("/");

    }

}
