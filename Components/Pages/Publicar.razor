@page "/publicar"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using System.Security.Claims
@using TruequeTools.Data
@using TruequeTools.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject IWebHostEnvironment WebHostEnv
@inject IServiciosSucursal SucursalService
@inject IServiciosCategoria CategoriaService
@inject IServiciosPublicacion PublicacionService
@inject IServiciosImagen ImagenService
@inject IJSRuntime JS

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Publicar</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border" style="margin-bottom:1.1rem">
        <h1 style="text-align:center">Publicar</h1>
        <EditForm Model="@Modelo" enctype="multipart/form-data" OnValidSubmit ="CargarPublicacion" FormName="CargarPublicacionForm">
            <DataAnnotationsValidator />
            <h2 style="text-align:center">Dar a conocer tu producto</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @MensajeError
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                <label for="nombre">Nombre del producto</label>
                <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                <label for="descripcion">Descripcion del producto</label>
                <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                    @foreach (var suc in sucursales)
                    {
                        <option value="@suc.Id">@suc.Nombre</option>
                    }
                </InputSelect>
                <label for="sucursal">Sucursal</label>
                <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                    <option value=0>Seleccione una categoría</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.Id">@cat.Nombre</option>
                    }
                </InputSelect>
                <label for="categoria">Categoria</label>
                <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
            </div>
            <hr />
            <label for="foto">Foto (opcional)</label>
            <div class="form-floating mb-3">
                <div>
                    <div>
                        <InputFile @ref="inputFile1" OnChange="e => ShowPreview(e, inputFile1,0)" accept="image/*" class="form-control" style="background:#e9ecef" />
                    </div>
                </div>
                @if (mostrarInputs[0])
                {
                    <div>
                        <InputFile @ref="inputFile2" OnChange="e => ShowPreview(e, inputFile2,1)" accept="image/*" class="form-control" style="background:#e9ecef" />
                    </div>
                    if (mostrarInputs[1])
                    {
                        <div>
                            <InputFile @ref="inputFile3" OnChange="e => ShowPreview(e, inputFile3,2)" accept="image/*" class="form-control" style="background:#e9ecef" />
                        </div>
                        if (mostrarInputs[2])
                        {
                            <div>
                                <InputFile @ref="inputFile4" OnChange="e => ShowPreview(e, inputFile4,3)" accept="image/*" class="form-control" style="background:#e9ecef" />
                            </div>
                            if (mostrarInputs[3])
                            {
                                <div>
                                    <InputFile @ref="inputFile5" OnChange="e => ShowPreview(e, inputFile5,3)" accept="image/*" class="form-control" style="background:#e9ecef" />
                                </div>
                            }
                        }
                    }
                }
            </div>
            <ValidationMessage For="() => Modelo.FileSize" class="text-danger" />
            <div class="form-floating mb-3">
                <img class="img-fluid img-thumbnail rounded mx-auto d-block w-100" @ref="previewImageElem" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-dark">Crear Publicacion</button>
        </EditForm>
    </div>
</div>

<script>
    window.previewImage = (inputElem, imgElem) => {
        const url = URL.createObjectURL(inputElem.files[0]);
        imgElem.addEventListener('load', () => URL.revokeObjectURL(url), { once: true });
        imgElem.src = url;
    }
</script>

<script>
    window.resetInputFile = (inputElem) => {
        inputElem.value = "";
    }
</script>

@code {
    private String? MensajeError;
    private ClaimsPrincipal? user;

    List<Sucursal> sucursales = new List<Sucursal>();
    List<Categoria> categorias = new List<Categoria>();
    int sucursalPreferidaId;

    private List<IBrowserFile?> files = new List<IBrowserFile?>();
    private InputFile? inputFile1,inputFile2,inputFile3,inputFile4,inputFile5;
    private ElementReference previewImageElem;
    List<Boolean> mostrarInputs = [false,false,false,false];

    private async Task ShowPreview(InputFileChangeEventArgs e, InputFile? inputFile, int num)
    {
        files.Add(e.File);
        Modelo.FileSize = files[num].Size;
        StateHasChanged();
        if (files[num] != null && Modelo.FileSize <= 5 * 1024 * 1024)
        {
            await JS.InvokeVoidAsync("previewImage", inputFile!.Element, previewImageElem); //código para hacer la preview de la imágen, funciona con javascript
            mostrarInputs[num] = true;

        }
        //código para hacer la preview de la imágen, funciona con javascript

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        sucursales = await SucursalService.ReadAllSucursales(); //LECTURA DE TODAS LAS SUCURSALES
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
        sucursalPreferidaId = int.Parse(user!.FindFirst("SucursalId")!.Value);
    }

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Modelo.SucursalId = sucursalPreferidaId; // Configurar el modelo de vista con la sucursal preferida del usuario
    }

    public async Task CargarPublicacion(EditContext editContext)
    {   
        List<Imagen> imagenes = new();
        foreach (var file in files)
        {
            if (file != null)
            {
                var uniqueFileName = $"{DateTime.Now:yyyyMMddHHmmssfff}{Path.GetExtension(file.Name)}";
                var filePath = Path.Combine(WebHostEnv.WebRootPath, "images", uniqueFileName);

                try
                {
                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        // Leer el contenido del archivo cargado en un búfer de memoria
                        await using (var memoryStream = new MemoryStream())
                        {
                            await file.OpenReadStream(5000 * 1024).CopyToAsync(memoryStream);

                            // Copiar el contenido del búfer de memoria al archivo de destino
                            memoryStream.Seek(0, SeekOrigin.Begin); // Asegurar que el puntero esté al principio del búfer
                            await memoryStream.CopyToAsync(fileStream);
                        }
                        Modelo.FotoUrl = $"{uniqueFileName}";
                        Imagen m = new Imagen();
                        m.FotoUrl = Modelo.FotoUrl;
                        imagenes.Add(m);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message); // Manejar cualquier excepción ocurrida durante la operación de escritura
                }
            }
        }
        

        var publicacion = new Publicacion
        {
            Nombre = Modelo.Nombre,
            Descripcion = Modelo.Descripcion,
            CategoriaId = Modelo.CategoriaId,
            UsuarioId = int.Parse(user!.FindFirst("UsuarioId")!.Value),
            HasImages = (files != null),
            SucursalId = Modelo.SucursalId
        };

        int publicacionID = await PublicacionService.CreatePublicacion(publicacion);

        if(files != null)
        {
            //********************************* PROVISORIAMENTE GUARDO UNA IMAGEN
            
            foreach (var m in imagenes) //ASI SE GUARDABA ANTES LA IMAGEN PERO EN PUBLICACION
                m.PublicacionId = publicacionID;
            
            
            await ImagenService.AltaImagenes(imagenes); //RECIBE UNA LISTA DE IMAGENES Y LAS AGREGA A LA TABLA "IMAGENES"
            //********************************* VER COMO CAMBIAR EL INPUTFILE A MULTIPLES
        }
        
        NavMan.NavigateTo("/");

    }

    //public async Task LimpiarImagen(EditContext editContext)
    //{
    //    if (Modelo.FileSize > 5 * 1024 * 1024)
    //    {
    //        Modelo.FileSize = 0;
    //        file = null;
    //        if (inputFile != null)
    //        {
    //            await JS.InvokeVoidAsync("resetInputFile", inputFile.Element); // Limpia el input file usando JavaScript
    //        }
    //        StateHasChanged();
    //    }
    //}

}
