@page "/ofertar/{Id:int}"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TruequeToolsDataContext context
@inject IServiciosPublicacion PublicacionService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Realizar oferta</PageTitle>

<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h1>Ofertar a la publicacion N°@Id</h1></li>
        @if (cargando)
        {
            <li class="list-group-item"><h3>Cargando...</h3></li>
        }
        else
        {
            if (PublicacionActual.Nombre != null)
            {
                context.Entry(PublicacionActual).Reference(p => p.Sucursal).Load();
                context.Entry(PublicacionActual).Reference(p => p.Usuario).Load();

                if(PublicacionActual.UsuarioId == UserId)
                {
                    <li class="list-group-item"><h3>Error: no puedes ofertar a una publicacion propia</h3></li>
                }
                else
                {
                    <li class="list-group-item d-flex justify-content-center">
                        <div class="card col-12 col-md-8 col-lg-3">
                            @if (@PublicacionActual.FotoUrl == null)
                            {
                                <img class="card-img-top" src="resources/blank.svg" alt="Foto del Producto">
                            }
                            else
                            {
                                <img class="card-img-top" src="images/@PublicacionActual.FotoUrl" alt="Foto del Producto">
                            }
                            <div class="card-body">
                                <h4 style="margin:0">@PublicacionActual.Nombre</h4>
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Sucursal: @PublicacionActual.Sucursal!.Nombre</li>
                                <li class="list-group-item">Publicado por: @PublicacionActual.Usuario!.Nombre</li>
                            </ul>
                        </div>
                    </li>
                    <li class="list-group-item">
                        @if (MisPublicaciones.Count != 0)
                        {
                            <h5>Mis Productos</h5>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Producto </th>
                                            <th>Descripcion</th>
                                            <th style="min-width: 120px;"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var publi in MisPublicaciones) //MUESTRA TODAS LAS PUBLICACIONES CON UN BOTON PARA OFERTAR
                                        {
                                            <tr>
                                                <td>@publi.Nombre</td>
                                                <td>@publi.Descripcion</td>
                                                <td style="text-align: right;">
                                                    <div class="d-flex justify-content-end">
                                                        <div class="btn-group" style="margin-right: 1rem;">
                                                            <button class="btn btn-dark rounded" style="margin-right: 0.5rem;">Ofertar</button>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <h5>Parece que no tienes productos publicados actualmente...</h5> //SI EL USUARIO NO TIENE PUBLICACIONES
                        }
                    </li>
                }  
            }
            else
            {
                <li class="list-group-item"><h3>Error: no se encontró o no existe la publicacion seleccionada</h3></li>
            }
        }
    </ul>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    public bool cargando { get; set; }
    public int UserId;

    public Publicacion PublicacionActual { get; set; } = new();
    public List<Publicacion> MisPublicaciones { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value); //TRAIGO EL ID DEL USUARIO QUE OFERTA
    }

    protected override async Task OnParametersSetAsync()
    {
        cargando = true; 
        PublicacionActual = await PublicacionService.ReadPublicacionById(Id); //LEE LA PUBLICACION ACTUAL 
        MisPublicaciones = await PublicacionService.ReadAllPublicacionesCurrentUser(UserId); //TRAE LAS PUBLICACIONES DEL USUARIO QUE OFERTA
        //FALTA FILTRARLAS POR SUCURSAL ASI SOLO SE PUEDEN OFRECER PUBLICACIONES DE LA MISMA SUCURSAL QUE LA PUBLICACION

        await Task.Delay(1000); //DEJAME EL DELAY DE 1 SEGUNDO POR FAVOR MARTIN :)
        cargando = false;
    }
  
}
