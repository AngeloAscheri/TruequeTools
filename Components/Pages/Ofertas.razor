@page "/ofertas"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiciosOferta OfertaService
@inject IServiciosPublicacion PublicacionService

@attribute [Authorize(Roles = "Admin,User")]

<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h3>Ofertas Realizadas: @OfertasRealizadas.Count</h3></li>
        @if(OfertasRealizadas.Count != 0)
        {
            <li class="list-group-item">
                @foreach (var publi in OfertasRealizadas)
                {
                    var estado = "";
                    @if (publi.Estado == 0)
                    {
                        estado = "Pendiente";
                    }
                    else if (publi.Estado == -1)
                    {
                        estado = "Reachazada";
                    }
                    else
                    {
                        estado = "Aceptada";
                    }
                    context?.Entry(publi).Reference(x => x.PublicacionQueOferto).Load();
                    context?.Entry(publi).Reference(x => x.PublicacionQueOfrezco).Load();
                    context?.Entry(publi.PublicacionQueOfrezco!).Reference(x => x.Usuario).Load();
                    <div class="oferta-cuerpo">
                        <p><span class="fw-bold">Usuario: </span>@publi?.PublicacionQueOfrezco?.Usuario?.Nombre</p>
                        <p><span class="fw-bold">Mi oferta: </span>@publi?.PublicacionQueOferto?.Nombre por @publi?.PublicacionQueOfrezco!.Nombre</p>
                        <p><span class="fw-bold">Estado: </span>@estado</p>
                    </div>
                }
            </li>
        }   
    </ul>
</div>
<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h3>Ofertas Recibidas: @OfertasRecibidas.Count</h3></li>
        @if (OfertasRecibidas.Count != 0)
        {
            <li class="list-group-item">
                @foreach (var publi in OfertasRecibidas)
                {
                    var estado = "";
                    @if (publi.Estado == 0)
                    {
                        estado = "Pendiente";
                    }
                    else if (publi.Estado == -1)
                    {
                        estado = "Reachazada";
                    }
                    else
                    {
                        estado = "Aceptada";
                    }
                    context?.Entry(publi).Reference(p => p.Usuario).Load();
                    context?.Entry(publi).Reference(p => p.PublicacionQueOferto).Load();
                    <div class="oferta-cuerpo">
                        <p><span class="fw-bold">Ofertante: </span>@publi.Usuario!.Nombre</p>
                        <p><span class="fw-bold">Su Oferta: </span>@publi.PublicacionQueOferto!.Nombre por @publi.PublicacionQueOfrezco!.Nombre</p>
                        <p><span class="fw-bold">Estado: </span>@estado</p>
                    </div>
                }
            </li>
        }    
    </ul>
</div>

@code {

    List<Oferta> OfertasRealizadas { get; set; } = new();
    List<Oferta> OfertasRecibidas { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value); //TRAIGO EL ID DEL USUARIO

        List<Publicacion> UserPublicaciones = await PublicacionService.ReadAllPublicacionesCurrentUser(UserId);

        OfertasRealizadas = await OfertaService.ReadAllOfertasRealizadasByUser(UserId);

        foreach (var publi in UserPublicaciones)
        {
            await context.Entry(publi).Collection(p => p.OfertasRecibidas!).LoadAsync();
            foreach (var oferta in publi.OfertasRecibidas!)
            {
                OfertasRecibidas.Add(oferta);
            }
        }
    }
}

