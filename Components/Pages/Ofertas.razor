@page "/ofertas"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject IJSRuntime JS
@inject IServiciosPublicacion PublicacionService
@inject IServiciosOferta OfertaService
@inject IServiciosPublicacion PublicacionService
@inject IServiciosTrueque TruequeService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Ofertas</h1>
        <hr />
        <div class="form-floating mb-3">
            @if (OfertasRealizadas.Count > 0)
            {
                <div class="table-responsive">
                    <!-- Añade esta clase para hacer la tabla responsiva -->
                    <table class="table table-bordered caption-top">
                        <caption>Realizadas</caption>
                        <thead>
                            <tr>
                                <th>Usuario</th>
                                <th>Mi Oferta</th>
                                <th>Su Producto</th>
                                <th>Sucursal</th>
                                <th>Fecha y Hora</th>
                                <th>Comentarios</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var realizada in OfertasRealizadas)
                            {
                                var estado = "";
                                var estilo = "";
                                var comentario = "";

                                @if (realizada.Estado == 0)
                                {
                                    estado = "Pendiente";
                                    estilo = "table-secondary";
                                    comentario = "Esperando respuesta...";
                                }
                                else if (realizada.Estado == -1)
                                {
                                    estado = "Rechazada";
                                    estilo = "table-danger";
                                    comentario = "Motivo: " + realizada.Motivo;
                                }
                                else if (realizada.Estado == 1)
                                {
                                    estado = "Aceptada";
                                    estilo = "table-success";
                                    comentario = "Trueque pendiente...";
                                }
                                else
                                {
                                    estado = "Completada";
                                    estilo = "table-info";
                                    comentario = "Trueque completado";
                                }
                                context?.Entry(realizada).Reference(x => x.PublicacionQueOferto).Load();
                                context?.Entry(realizada).Reference(x => x.PublicacionQueOfrezco).Load();
                                context?.Entry(realizada.PublicacionQueOfrezco!).Reference(x => x.Usuario).Load();
                                context?.Entry(realizada.PublicacionQueOfrezco!).Reference(x => x.Sucursal).Load();
                                <tr class="@estilo">
                                    <td>@realizada?.PublicacionQueOfrezco?.Usuario?.Nombre</td>
                                    <td>
                                        <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalPublicacion" @onclick="@(() => SwitchPublicacion(realizada!.PublicacionQueOferto!))">
                                            @realizada?.PublicacionQueOferto!.Nombre
                                        </NavLink>
                                    </td>
                                    <td>                                     
                                        <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalPublicacion" @onclick="@(() => SwitchPublicacion(realizada!.PublicacionQueOfrezco!))">
                                            @realizada?.PublicacionQueOfrezco!.Nombre
                                        </NavLink>
                                    </td>
                                    <td>@realizada?.PublicacionQueOferto!.Sucursal!.Nombre</td>
                                    <td>@realizada?.Fecha.ToShortDateString() @realizada?.Fecha.ToShortTimeString()</td>
                                    <td>@comentario</td>
                                    @if (realizada!.Estado == 0)
                                    {
                                        <td style="text-align: right;">
                                        <div class="d-flex justify-content-end">
                                            <div class="btn-group" style="margin-right: 1rem;">
                                                <button class="btn btn-dark rounded" style="margin-right: 0.5rem;" @onclick="@(() => CancelarOferta(realizada))">Cancelar</button>
                                                <button class="btn btn-danger rounded" @onclick="@(() => RechazarOferta(realizada))">Rechazar</button>
                                            </div>
                                        </div>
                                    </td>
                                    }
                                    else
                                    {
                                        <td><b>@estado</b></td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No hay ofertas realizadas para mostrar...
                </div>
            } 
        </div>
        <hr />
        <div class="form-floating mb-3">
            @if(OfertasRecibidas.Count > 0)
            {
                <div class="table-responsive">
                    <!-- Añade esta clase para hacer la tabla responsiva -->
                    <table class="table table-bordered caption-top">
                        <caption>Recibidas</caption>
                        <thead>
                            <tr>
                                <th>Usuario</th>
                                <th>Mi Producto</th>
                                <th>Su Oferta</th>
                                <th>Sucursal</th>
                                <th>Fecha y Hora</th>     
                                <th>Comentarios</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var recibida in OfertasRecibidas)
                            {
                                var estado = "";
                                var estilo = "";        
                                var comentario = "";

                                @if (recibida.Estado == 0)
                                {
                                    estado = "Pendiente";
                                    estilo = "table-secondary";
                                    comentario = "Esperando respuesta...";
                                }
                                else if (recibida.Estado == -1)
                                {
                                    estado = "Rechazada";
                                    estilo = "table-danger";
                                    comentario = "Motivo: " + recibida.Motivo;
                                }
                                else if (recibida.Estado == 1)
                                {
                                    estado = "Aceptada";
                                    estilo = "table-success";
                                    comentario = "Trueque pendiente...";
                                }
                                else
                                {
                                    estado = "Completada";
                                    estilo = "table-info";
                                    comentario = "Trueque completado";
                                }

                                context?.Entry(recibida).Reference(x => x.PublicacionQueOferto).Load();
                                context?.Entry(recibida).Reference(x => x.PublicacionQueOfrezco).Load();
                                context?.Entry(recibida.PublicacionQueOfrezco!).Reference(x => x.Usuario).Load();
                                context?.Entry(recibida.PublicacionQueOfrezco!).Reference(x => x.Sucursal).Load();

                                <tr class="@estilo">
                                    <td>@recibida?.PublicacionQueOfrezco?.Usuario?.Nombre</td>
                                    <td>
                                        <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalPublicacion" @onclick="@(() => SwitchPublicacion(recibida!.PublicacionQueOfrezco!))">
                                            @recibida?.PublicacionQueOfrezco!.Nombre
                                        </NavLink>
                                    </td>
                                    <td>
                                        <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalPublicacion" @onclick="@(() => SwitchPublicacion(recibida!.PublicacionQueOferto!))">
                                            @recibida?.PublicacionQueOferto!.Nombre
                                        </NavLink>
                                    </td>
                                    <td>@recibida?.PublicacionQueOferto!.Sucursal!.Nombre</td>
                                    <td>@recibida?.Fecha.ToShortDateString() @recibida?.Fecha.ToShortTimeString()</td>
                                    <td>@comentario</td>
                                    @if (recibida!.Estado == 0)
                                    {
                                    <td style="text-align: right;">
                                        <div class="d-flex justify-content-end">
                                            <div class="btn-group" style="margin-right: 1rem;">
                                                <button class="btn btn-success rounded" style="margin-right: 0.5rem;" @onclick="@(() => AceptarOferta(recibida))">Aceptar</button>
                                                <button class="btn btn-danger rounded" @onclick="@(() => RechazarOferta(recibida))">Rechazar</button>
                                            </div>
                                        </div>
                                    </td>
                                    }
                                    else
                                    {
                                    <td><b>@estado</b></td>
                                    }       
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No hay ofertas recibidas para mostrar...
                </div>
            }    
        </div>
    </div>
</div>

<div class="modal fade" id="ModalMotivoRechazo" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Motivo de rechazo</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                @if (exito)
                {
                    <div class="alert alert-success" role="alert">
                        Se rechazó la oferta !
                    </div>
                }
                else
                {
                    <EditForm Model="@Modelo" OnValidSubmit="CargarMotivo" FormName="MotivoForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        @if (!string.IsNullOrEmpty(MensajeError))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @MensajeError
                            </div>
                        }
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Modelo.Motivo" class="form-control" aria-required="true">
                                <option value="">Selecciona una opción</option>
                                <option value="Horario no conveniente">Horario no conveniente</option>
                                <option value="Fecha no conveniente">Fecha no conveniente</option>
                                <option value="No es lo que estoy buscando">No es lo que estoy buscando</option>
                            </InputSelect>
                            <label for="motivo">Motivo...</label>
                            <ValidationMessage For="() => Modelo.Motivo" class="text-danger" />
                        </div>
                        <button type="submit" class="w-100 btn btn-lg btn-dark">Rechazar</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalAceptar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Aceptar Oferta</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (publicRecibComp || publicMiaComp)
                {
                    <div class="alert alert-secondary" role="alert">
                        No es posible aceptar la oferta en este momento. Si lo desea puede esperar a la resolucion o rechazar la oferta
                    </div>
                    if (publicMiaComp)
                    {
                        <div class="alert alert-warning" role="alert">
                            - Su producto ya tiene un trueque pendiente.
                        </div>
                    }
                    if (publicRecibComp)
                    {
                        <div class="alert alert-warning" role="alert">
                            - El producto al que ofertó / le oferecieron ya tiene un trueque pendiente.
                        </div>
                    }    
                }
                else
                {
                    <div class="alert alert-success" role="alert">
                        Oferta aceptada exitosamente !
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalCancelar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Cancelar Oferta</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (cancelada)
                {
                    <div class="alert alert-success" role="alert">
                        Se canceló la oferta !
                    </div>
                }
                else
                {
                    <div class="alert alert-warning" role="alert">
                        ¿Desea cancelar la ofera realizada?
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-dark" @onclick="Cancelar">Cancelar</button>
                }
            </div>
        </div>
    </div>
</div>

<PublicacionModal PublicacionActual="publicacion" />

<script>
    function toggleModalRechazar() {
        bootstrap.Modal.getOrCreateInstance("#ModalMotivoRechazo").toggle();
    }
    function toggleModalAceptar() {
        bootstrap.Modal.getOrCreateInstance("#ModalAceptar").toggle();
    }
    function toggleModalCancelar() {
        bootstrap.Modal.getOrCreateInstance("#ModalCancelar").toggle();
    }
    function refreshPage() {
        location.reload();
    }
</script>

@code {

    List<Oferta> OfertasRealizadas { get; set; } = new();
    List<Oferta> OfertasRecibidas { get; set; } = new();

    [SupplyParameterFromForm]
    private MotivoViewModel Modelo { get; set; } = new();

    bool exito = false;
    bool cancelada = false;
    string? MensajeError;
    Oferta ofertaActual = new();
    Publicacion publicacion = new();

    void SwitchPublicacion(Publicacion p)
    {
        publicacion = p;
    }

    public async Task Cancelar()
    {
        cancelada = true;
        ofertaActual.Estado = -1;
        ofertaActual.Motivo = "El usuario canceló la oferta";
        await OfertaService.OverwriteOfertaById(ofertaActual);
    }

    public async Task CargarMotivo(EditContext editContext)
    {
        exito = true;
        ofertaActual.Estado = -1;
        ofertaActual.Motivo = Modelo.Motivo;
        await OfertaService.OverwriteOfertaById(ofertaActual);
    }

    public void CerrarModal()
    {
        if (!exito)
        {
            Modelo = new MotivoViewModel();
            MensajeError = null;
            exito = false;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value); //TRAIGO EL ID DEL USUARIO

        List<Publicacion> UserPublicaciones = await PublicacionService.ReadAllPublicacionesCurrentUser(UserId);

        OfertasRealizadas = await OfertaService.ReadAllOfertasRealizadasByUser(UserId);

        foreach (var publi in UserPublicaciones)
        {
            await context.Entry(publi).Collection(p => p.OfertasRecibidas!).LoadAsync();
            foreach (var oferta in publi.OfertasRecibidas!)
            {
                OfertasRecibidas.Add(oferta);
            }
        }

        // Ordenar OfertasRealizadas en orden descendente por estado
        OfertasRealizadas = OfertasRealizadas.OrderByDescending(oferta => oferta.Estado).ToList();

        // Ordenar OfertasRecibidas en orden descendente por estado
        OfertasRecibidas = OfertasRecibidas.OrderByDescending(oferta => oferta.Estado).ToList();

    }

    bool publicRecibComp;
    bool publicMiaComp;

    public async Task AceptarOferta(Oferta oferta)
    {
        publicRecibComp = await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfertoId);
        publicMiaComp = await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfrezcoId);

        try // necesaria por un problema del iterops de javascript
        {
            await JS.InvokeVoidAsync("toggleModalAceptar");
        }
        catch           // ignorar
        {
        }

        if (!(publicRecibComp || (publicMiaComp)))
        {
            oferta.Estado = 1;
            oferta.PublicacionQueOferto!.Deleted = true;
            oferta.PublicacionQueOfrezco!.Deleted = true;
            await OfertaService.OverwriteOfertaById(oferta);
            await PublicacionService.OverwritePublicacionById(oferta.PublicacionQueOfrezco);
            await PublicacionService.OverwritePublicacionById(oferta.PublicacionQueOferto);
            Trueque t = new Trueque
                {
                    OfertaId = oferta.Id
                };
            await TruequeService.CreateTrueque(t);
            StateHasChanged();
        }
    }

    public async Task RechazarOferta(Oferta oferta)
    {
        try // necesaria por un problema del iterops de javascript
        {
            ofertaActual = oferta;
            await JS.InvokeVoidAsync("toggleModalRechazar");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.ToString());
        }
        StateHasChanged();
    }

    public async Task CancelarOferta(Oferta oferta)
    {
        try // necesaria por un problema del iterops de javascript
        {
            ofertaActual = oferta;
            await JS.InvokeVoidAsync("toggleModalCancelar");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", ex.ToString());            
        }
        StateHasChanged();
    }

    void VerPublicacion(int id)
    {
        NavMan.NavigateTo($"/publicacion/{id}");
    }
}

