@page "/ofertas"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject IServiciosPublicacion PublicacionService
@inject IServiciosOferta OfertaService
@inject IServiciosPublicacion PublicacionService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h3>Ofertas Realizadas: @OfertasRealizadas.Count</h3></li>
        @if(OfertasRealizadas.Count != 0)
        {
            <li class="list-group-item">
                @foreach (var realizada in OfertasRealizadas)
                {
                    var estado = "";
                    var cuerpo = "oferta-cuerpo";
                    @if (realizada.Estado == 0)
                    {
                        estado = "Pendiente";
                    }
                    else if (realizada.Estado == -1)
                    {
                        estado = "Rechazada";
                        cuerpo += "-rechazada";
                    }
                    else if(realizada.Estado == 1)
                    {
                        estado = "Aceptada";
                        cuerpo += "-aceptada";
                    }
                    else
                    {
                        estado = "Completada";
                        cuerpo += "-completada";
                    }
                    context?.Entry(realizada).Reference(x => x.PublicacionQueOferto).Load();
                    context?.Entry(realizada).Reference(x => x.PublicacionQueOfrezco).Load();
                    context?.Entry(realizada.PublicacionQueOfrezco!).Reference(x => x.Usuario).Load();
                    <div class="@cuerpo">
                        <p><span class="fw-bold">Usuario: </span>@realizada?.PublicacionQueOfrezco?.Usuario?.Nombre</p>
                        <p><span class="fw-bold">Mi Oferta: </span>@realizada?.PublicacionQueOfrezco!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(realizada!.PublicacionQueOfrezcoId!))">Ver</a></p>
                        <p><span class="fw-bold">Su Producto: </span>@realizada?.PublicacionQueOferto!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(realizada!.PublicacionQueOfertoId!))">Ver</a></p>
                        <p><span class="fw-bold">Estado: </span>@estado</p>
                    </div>
                }
            </li>
        }   
    </ul>
</div>
<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h3>Ofertas Recibidas: @OfertasRecibidas.Count</h3></li>
        @if (OfertasRecibidas.Count != 0)
        {
            <li class="list-group-item">
                @foreach (var recibida in OfertasRecibidas)
                {
                    var estado = "";
                    var cuerpo = "oferta-cuerpo";
                    @if (recibida.Estado == 0)
                    {
                        estado = "Pendiente";
                    }
                    else if (recibida.Estado == -1)
                    {
                        estado = "Rechazada";
                        cuerpo += "-rechazada";
                    }
                    else if (recibida.Estado == 1)
                    {
                        estado = "Aceptada";
                        cuerpo += "-aceptada";
                    }
                    else
                    {
                        estado = "Completada";
                        cuerpo += "-completada";
                    }
                    context?.Entry(recibida).Reference(p => p.Usuario).Load();
                    context?.Entry(recibida).Reference(p => p.PublicacionQueOferto).Load();
                    <div class="@cuerpo">
                        <p><span class="fw-bold">Ofertante: </span>@recibida.Usuario!.Nombre</p>
                        <p><span class="fw-bold">Su Oferta: </span>@recibida.PublicacionQueOferto!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(recibida.PublicacionQueOfertoId))">Ver</a></p>
                        <p><span class="fw-bold">Mi Producto: </span>@recibida.PublicacionQueOfrezco!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(recibida.PublicacionQueOfrezcoId))">Ver</a></p>
                        <p><span class="fw-bold">Estado: </span>@estado</p>
                        @if (recibida.Estado == 0)
                        {
                            <button class="btn btn-success" @onclick="@(() => AceptarOferta(recibida))">
                                Aceptar
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-4 4.5a.75.75 0 0 1-1.08 0l-2-2.25a.75.75 0 0 1 1.08-1.05l1.47 1.65 3.47-3.9z" />
                                </svg>
                            </button>
                            <button class="btn btn-danger" @onclick="@(() => RechazarOferta(recibida))">
                                Rechazar
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </button>
                        }
                    </div>
                }
            </li>
        }    
    </ul>
</div>

@code {

    List<Oferta> OfertasRealizadas { get; set; } = new();
    List<Oferta> OfertasRecibidas { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value); //TRAIGO EL ID DEL USUARIO

        List<Publicacion> UserPublicaciones = await PublicacionService.ReadAllPublicacionesCurrentUser(UserId);

        OfertasRealizadas = await OfertaService.ReadAllOfertasRealizadasByUser(UserId);

        foreach (var publi in UserPublicaciones)
        {
            await context.Entry(publi).Collection(p => p.OfertasRecibidas!).LoadAsync();
            foreach (var oferta in publi.OfertasRecibidas!)
            {
                OfertasRecibidas.Add(oferta);
            }
        }

        // Ordenar OfertasRealizadas en orden descendente por estado
        OfertasRealizadas = OfertasRealizadas.OrderByDescending(oferta => oferta.Estado).ToList();

        // Ordenar OfertasRecibidas en orden descendente por estado
        OfertasRecibidas = OfertasRecibidas.OrderByDescending(oferta => oferta.Estado).ToList();

    }

    public async Task AceptarOferta(Oferta oferta)
    {
        if (await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfertoId) && await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfrezcoId))
        {

        }
        else if (await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfertoId)) {

        }
        else if (await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfrezcoId))
        {

        }
        else
        {
            oferta.Estado = 1;
            oferta.PublicacionQueOferto!.IsOculta = true;
            oferta.PublicacionQueOfrezco!.IsOculta = true;
            await OfertaService.OverwriteOfertaById(oferta);
            await PublicacionService.OverwritePublicacionById(oferta.PublicacionQueOfrezco);
            await PublicacionService.OverwritePublicacionById(oferta.PublicacionQueOferto);
            StateHasChanged();
        }
    }

    public async Task RechazarOferta(Oferta oferta)
    {
        oferta.Estado = -1;
        await OfertaService.OverwriteOfertaById(oferta);
        StateHasChanged();
    }

    void VerPublicacion(int id)
    {
        NavMan.NavigateTo($"/publicacion/{id}");
    }
}

