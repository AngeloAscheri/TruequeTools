@page "/ofertas"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject IJSRuntime JS
@inject IServiciosPublicacion PublicacionService
@inject IServiciosOferta OfertaService
@inject IServiciosPublicacion PublicacionService
@inject IServiciosTrueque TruequeService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h3>Ofertas Realizadas: @OfertasRealizadas.Count</h3></li>
        @if(OfertasRealizadas.Count != 0)
        {
            <li class="list-group-item">
                @foreach (var realizada in OfertasRealizadas)
                {
                    var estado = "";
                    var cuerpo = "oferta-cuerpo";
                    @if (realizada.Estado == 0)
                    {
                        estado = "Pendiente";
                    }
                    else if (realizada.Estado == -1)
                    {
                        estado = "Rechazada";
                        cuerpo += "-rechazada";
                    }
                    else if(realizada.Estado == 1)
                    {
                        estado = "Aceptada";
                        cuerpo += "-aceptada";
                    }
                    else
                    {
                        estado = "Completada";
                        cuerpo += "-completada";
                    }
                    context?.Entry(realizada).Reference(x => x.PublicacionQueOferto).Load();
                    context?.Entry(realizada).Reference(x => x.PublicacionQueOfrezco).Load();
                    context?.Entry(realizada.PublicacionQueOfrezco!).Reference(x => x.Usuario).Load();
                    <div class="@cuerpo">
                        <p><span class="fw-bold">Usuario: </span>@realizada?.PublicacionQueOfrezco?.Usuario?.Nombre</p>
                        <p><span class="fw-bold">Mi Oferta: </span>@realizada?.PublicacionQueOfrezco!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(realizada!.PublicacionQueOfrezcoId!))">Ver</a></p>
                        <p><span class="fw-bold">Su Producto: </span>@realizada?.PublicacionQueOferto!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(realizada!.PublicacionQueOfertoId!))">Ver</a></p>
                        <p><span class="fw-bold">Estado: </span>@estado</p>
                    </div>
                }
            </li>
        }   
    </ul>
</div>
<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        <li class="list-group-item"><h3>Ofertas Recibidas: @OfertasRecibidas.Count</h3></li>
        @if (OfertasRecibidas.Count != 0)
        {
            <li class="list-group-item">
                @foreach (var recibida in OfertasRecibidas)
                {
                    var estado = "";
                    var cuerpo = "oferta-cuerpo";
                    @if (recibida.Estado == 0)
                    {
                        estado = "Pendiente";
                    }
                    else if (recibida.Estado == -1)
                    {
                        estado = "Rechazada";
                        cuerpo += "-rechazada";
                    }
                    else if (recibida.Estado == 1)
                    {
                        estado = "Aceptada";
                        cuerpo += "-aceptada";
                    }
                    else
                    {
                        estado = "Completada";
                        cuerpo += "-completada";
                    }
                    context?.Entry(recibida).Reference(p => p.Usuario).Load();
                    context?.Entry(recibida).Reference(p => p.PublicacionQueOferto).Load();
                    <div class="@cuerpo">
                        <p><span class="fw-bold">Ofertante: </span>@recibida.Usuario!.Nombre</p>
                        <p><span class="fw-bold">Su Oferta: </span>@recibida.PublicacionQueOferto!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(recibida.PublicacionQueOfertoId))">Ver</a></p>
                        <p><span class="fw-bold">Mi Producto: </span>@recibida.PublicacionQueOfrezco!.Nombre <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(recibida.PublicacionQueOfrezcoId))">Ver</a></p>
                        <p><span class="fw-bold">Estado: </span>@estado</p>
                        @if (recibida.Estado == 0)
                        {
                            <button class="btn btn-success" @onclick="@(() => AceptarOferta(recibida))">
                                Aceptar
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check" viewBox="0 0 16 16">
                                    <path d="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-4 4.5a.75.75 0 0 1-1.08 0l-2-2.25a.75.75 0 0 1 1.08-1.05l1.47 1.65 3.47-3.9z" />
                                </svg>
                            </button>
                            <button class="btn btn-danger" @onclick="@(() => RechazarOferta(recibida))">
                                Rechazar
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                </svg>
                            </button>
                        }
                    </div>
                }
            </li>
        }    
    </ul>
</div>

<div class="modal fade" id="ModalMotivoRechazo" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Motivo de Rechazo</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                @if (exito)
                {
                    <div class="alert alert-success" role="alert">
                        Se rechazó la oferta !
                    </div>
                }
                else
                {
                    <EditForm Model="@Modelo" OnValidSubmit="CargarMotivo" FormName="MotivoForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        @if (!string.IsNullOrEmpty(MensajeError))
                        {
                            <div class="alert alert-danger mt-3" role="alert">
                                @MensajeError
                            </div>
                        }
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Modelo.Motivo" class="form-control" aria-required="true">
                                <option value="">Selecciona una opción</option>
                                <option value="Horario no conveniente">Horario no conveniente</option>
                                <option value="Fecha no conveniente">Fecha no conveniente</option>
                                <option value="No es lo que estoy buscando">No es lo que estoy buscando</option>
                            </InputSelect>
                            <label for="motivo">Selecciona una opción...</label>
                            <ValidationMessage For="() => Modelo.Motivo" class="text-danger" />
                        </div>
                        <button type="submit" class="w-100 btn btn-lg btn-dark">Responder</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="ModalAceptar" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CerrarModalAceptar"></button>
            </div>
            <div class="modal-body">
                @if (publicRecibComp || publicMiaComp)
                {
                    <div class="alert alert-danger" role="alert">
                        No es posible aceptar la oferta:
                    </div>
                    if (publicMiaComp)
                    {
                        <div class="alert alert-custom" role="alert">
                            - Su producto ya tiene un trueque pendiente.
                        </div>
                    }
                    if (publicRecibComp)
                    {
                        <div class="alert alert-custom" role="alert">
                            - El producto que le ofrecieron ya tiene un trueque pendiente.
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-success" role="alert">
                        Se ha aceptado la oferta!
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function toggleModalRechazar() {
        bootstrap.Modal.getOrCreateInstance("#ModalMotivoRechazo").toggle();
    }
    function toggleModalAceptar() {
        bootstrap.Modal.getOrCreateInstance("#ModalAceptar").toggle();
    }
    function refreshPage() {
        location.reload();
    }
</script>

@code {

    List<Oferta> OfertasRealizadas { get; set; } = new();
    List<Oferta> OfertasRecibidas { get; set; } = new();

    [SupplyParameterFromForm]
    private MotivoViewModel Modelo { get; set; } = new();

    bool exito = false;
    string? MensajeError;
    Oferta ofertaActual = new();

    public async Task CargarMotivo(EditContext editContext)
    {
        exito = true;
        ofertaActual.Estado = -1;
        ofertaActual.Motivo = Modelo.Motivo;
        await OfertaService.OverwriteOfertaById(ofertaActual);
    }

    public async void CerrarModal()
    {
        if (exito)
        {
            await JS.InvokeVoidAsync("refreshPage");
        }
        else
        {
            Modelo = new MotivoViewModel();
            MensajeError = null;
            exito = false;
            StateHasChanged();
        }
    }

    public async void CerrarModalAceptar()
    {
        await JS.InvokeVoidAsync("refreshPage");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var UserId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value); //TRAIGO EL ID DEL USUARIO

        List<Publicacion> UserPublicaciones = await PublicacionService.ReadAllPublicacionesCurrentUser(UserId);

        OfertasRealizadas = await OfertaService.ReadAllOfertasRealizadasByUser(UserId);

        foreach (var publi in UserPublicaciones)
        {
            await context.Entry(publi).Collection(p => p.OfertasRecibidas!).LoadAsync();
            foreach (var oferta in publi.OfertasRecibidas!)
            {
                OfertasRecibidas.Add(oferta);
            }
        }

        // Ordenar OfertasRealizadas en orden descendente por estado
        OfertasRealizadas = OfertasRealizadas.OrderByDescending(oferta => oferta.Estado).ToList();

        // Ordenar OfertasRecibidas en orden descendente por estado
        OfertasRecibidas = OfertasRecibidas.OrderByDescending(oferta => oferta.Estado).ToList();

    }

    bool publicRecibComp;
    bool publicMiaComp;

    public async Task AceptarOferta(Oferta oferta)
    {
        publicRecibComp = await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfertoId);
        publicMiaComp = await OfertaService.PublicacionComprometida(oferta.PublicacionQueOfrezcoId);
        
        try // necesaria por un problema del iterops de javascript
        {
            await JS.InvokeVoidAsync("toggleModalAceptar");
        }
        catch           // ignorar
        {
        }

        if (!(publicRecibComp || (publicMiaComp)))
        {
            oferta.Estado = 1;
            oferta.PublicacionQueOferto!.IsOculta = true;
            oferta.PublicacionQueOfrezco!.IsOculta = true;
            await OfertaService.OverwriteOfertaById(oferta);
            await PublicacionService.OverwritePublicacionById(oferta.PublicacionQueOfrezco);
            await PublicacionService.OverwritePublicacionById(oferta.PublicacionQueOferto);
            Trueque t = new Trueque
                {
                    OfertaId = oferta.Id
                };
            await TruequeService.CreateTrueque(t);
            StateHasChanged();
        }
    }

    public async Task RechazarOferta(Oferta oferta)
    {
        try // necesaria por un problema del iterops de javascript
        {
            ofertaActual = oferta;
            await JS.InvokeVoidAsync("toggleModalRechazar");
        }
        catch           // ignorar
        {
        }
        StateHasChanged();
    }

    void VerPublicacion(int id)
    {
        NavMan.NavigateTo($"/publicacion/{id}");
    }
}

