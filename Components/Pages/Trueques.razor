@page "/trueques"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TruequeToolsDataContext context
@inject NavigationManager NavMan
@inject IServiciosUsuario UsuarioService
@inject IServiciosTrueque TruequeService
@inject IServiciosOferta OfertaService
@inject IServiciosSucursal SucursalService
@inject IServiciosPublicacion PublicacionService
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Admin,Employee")]

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Trueques</h1>
        <h2 style="text-align:center">@nombreSucursal</h2>
        @if (mostrarAdmin)
        {
            <h3 style="text-align:center">Desde el @fechaInicioTitulo.ToString("dd/MM/yyyy") al @fechaFinTitulo.ToString("dd/MM/yyyy") </h3>
        }
        <hr />
        <div class="form-floating mb-3">
            @if (mostrarAdmin)
            {
                <div class="form-floating mb-3">
                    <InputDate @bind-Value="fechaInicio" class="form-control" aria-required="true" placeholder="" maxlength="50" />
                    <label for="fecha-nacimiento">Fecha de Inicio</label>
                </div>
                <div class="form-floating mb-3">
                    <InputDate @bind-Value="fechaFin" class="form-control" aria-required="true" placeholder="" maxlength="50" />
                    <label for="fecha-nacimiento">Fecha de Fin</label>
                </div>
                <button type="button" class="w-100 btn btn-lg btn-dark" @onclick="ActualizarTruequesClick">Actualizar</button>
            }
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (trueques.Count == 0)
                {
                    <div class="alert alert-warning" role="alert">
                        No hay trueques para mostrar...
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <!-- Añade esta clase para hacer la tabla responsiva -->
                        <table class="table table-bordered caption-top">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Sucursal</th>
                                    <th>Fecha y Hora</th>
                                    <th>Producto 1</th>
                                    <th>Producto 2</th>
                                    <th>Comentarios</th>
                                    <th>Estado</th>                               
                                </tr> 
                            </thead>
                            <tbody>
                                @foreach (var t in trueques)
                                {
                                    var estado = "";
                                    var estilo = "";
                                    var comentario = "";

                                    if(t.Estado == -1)
                                    {
                                        estado = "Rechazado";
                                        estilo = "table-danger";
                                        comentario = "Trueque rechazado";
                                    }
                                    else if(t.Estado == 0)
                                    {
                                        estado = "Pendiente";
                                        estilo = "table-secondary";
                                        comentario = "Trueque pendiente";
                                    }
                                    else 
                                    {
                                        estado = "Completado";
                                        estilo = "table-success";
                                        if (t.HasVentas)
                                        {
                                            comentario = "Trueque completado con";
                                        }
                                        else
                                        {
                                            comentario = "Trueque completado sin ventas";
                                        } 
                                    }
                                                
                                    context.Entry(t).Reference(p => p.Oferta).Load();
                                    context.Entry(t.Oferta!).Reference(p => p.PublicacionQueOfrezco).Load();
                                    context.Entry(t.Oferta!).Reference(p => p.PublicacionQueOferto).Load();
                                    context.Entry(t.Oferta!.PublicacionQueOferto!).Reference(p => p.Sucursal).Load();
                                    <tr class="@estilo">
                                        <td>@t.Id</td>
                                        <td>@t.Oferta!.PublicacionQueOferto!.Sucursal!.Nombre</td>
                                        <td>@t.Oferta!.Fecha.ToShortDateString() @t.Oferta!.Fecha.ToShortTimeString()</td>
                                        <td>
                                            <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalPublicacion" @onclick="@(() => SwitchPublicacion(@t.Oferta!.PublicacionQueOferto!))">
                                                @t.Oferta!.PublicacionQueOferto!.Nombre
                                            </NavLink>
                                        </td>
                                        <td>
                                            <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalPublicacion" @onclick="@(() => SwitchPublicacion(@t.Oferta!.PublicacionQueOfrezco!))">
                                                @t.Oferta!.PublicacionQueOfrezco!.Nombre
                                            </NavLink> 
                                        </td>
                                        @if (t.HasVentas)
                                        {
                                            <td>
                                                @comentario
                                                <NavLink class="text-primary" data-bs-toggle="modal" data-bs-target="#ModalProductos" @onclick="@(() =>VerProductos(t.Id))">
                                                    ventas
                                                </NavLink>
                                            </td>
                                        }
                                        else
                                        {
                                           <td>@comentario</td>   
                                        }
                                        @if (t.Estado == 0)
                                        {
                                            <td style="text-align: right;">
                                                <div class="d-flex justify-content-end">
                                                    <div class="btn-group" style="margin-right: 1rem;">
                                                        <button class="btn btn-success rounded" style="margin-right: 0.5rem;" @onclick="@(() =>AceptarTrueque(t.Id))" data-bs-toggle="modal" data-bs-target="#ModalConfirmar">Confirmar</button>
                                                        <button class="btn btn-danger rounded" @onclick="@(() =>RechazarTrueque(t.Id))" data-bs-toggle="modal" data-bs-target="#ModalRechazar">Rechazar</button>
                                                    </div>
                                                </div>
                                            </td>
                                        }
                                        else if (t.Estado == 1 && !t.CargaCompleted)
                                        {
                                            <td style="text-align: right;">
                                                <div class="d-flex justify-content-end">
                                                    <div class="btn-group" style="margin-right: 1rem;">
                                                        <button class="btn btn-dark rounded" @onclick="@(() =>CargarProductos(t.Id))" data-bs-toggle="modal" data-bs-target="#ModalVentas">Ventas</button>
                                                    </div>
                                                </div>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>@estado</td>
                                        }                                   
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div class="modal fade" id="FechaInvalidaModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Fechas invalidas</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (fechaInicio > fechaFin)
                {
                    <div class="alert alert-danger" role="alert">
                        La fecha de inicio no puede ser posterior a la fecha de fin!
                    </div>
                }
                @if (fechaInicio > DateTime.Today)
                {
                    <div class="alert alert-danger" role="alert">
                        La fecha de inicio no puede ser posterior a la fecha de hoy!
                    </div>
                }
                @if (fechaFin > DateTime.Today)
                {
                    <div class="alert alert-danger" role="alert">
                        La fecha de fin no puede ser posterior a la fecha de hoy!
                    </div>
                }
                @if (fechaInicio < fechaCreacion)
                {
                    <div class="alert alert-danger" role="alert">
                        La fecha de inicio no puede ser anterior a la fecha de creacion!
                        Fecha creacion: @fechaCreacion.ToString("dd/MM/yyyy")
                    </div>
                }
                @if (fechaFin < fechaCreacion)
                {
                    <div class="alert alert-danger" role="alert">
                        La fecha de fin no puede ser anterior a la fecha de creacion!
                        Fecha creacion: @fechaCreacion.ToString("dd/MM/yyyy")
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function toggleModalError() {
        bootstrap.Modal.getOrCreateInstance("#FechaInvalidaModal").toggle();
    }
</script>

<script>
    function refreshPage() {
        location.reload();
    }
</script>

<TruequeConfirmar TruequeId="TruequeId" />
<TruequeEliminar TruequeId="TruequeId" />
<TruequeVentas TruequeId="TruequeId" />
<PublicacionModal PublicacionActual="publicacion" />
<ProductosModal TruequeId="TruequeId" />

@code {

    List<Trueque> trueques = new List<Trueque>();

    DateTime fechaCreacion = new DateTime(2024, 2, 29);
    DateTime fechaInicioTitulo = new DateTime(2024, 2, 29);
    DateTime fechaFinTitulo = DateTime.Today;
    DateTime fechaInicio = new DateTime(2024, 2, 29);
    DateTime fechaFin = DateTime.Today;

    bool cargando = true;
    string? nombreSucursal;
    bool mostrarAdmin;
    int TruequeId;
    Publicacion publicacion = new();

    void SwitchPublicacion(Publicacion p)
    {
        publicacion = p;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value);
        await ActualizarTrueques();
    }

    private async Task ActualizarTrueques()
    {
        await Task.Delay(500);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value);
        var sucursalId = int.Parse(authState.User!.FindFirst("SucursalId")!.Value);
        if (userId == 1)
        {
            fechaFin = fechaFin.AddHours(23).AddMinutes(59);
            trueques = await TruequeService.ReadTruequesEntreFechas(fechaInicio,fechaFin);
            nombreSucursal = "Todas las Sucursales";
            mostrarAdmin = true;
        }
        else
        {
            trueques = await TruequeService.ReadTruequesBySucursal(sucursalId);
            Sucursal suc = await SucursalService.ReadSucursalById(sucursalId);
            nombreSucursal = "Sucursal " + suc.Nombre;
            mostrarAdmin = false;
        }
        cargando = false;
    }

    private async Task ActualizarTruequesClick()
    {
        if (fechaInicio > fechaFin || fechaInicio > DateTime.Today || fechaFin > DateTime.Today || fechaInicio < fechaCreacion || fechaFin < fechaCreacion)
        {
            try // necesaria por un problema del iterops de javascript
            {
                await JS.InvokeVoidAsync("toggleModalError");
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", ex.ToString());
            }
        }
        else
        {
            fechaInicioTitulo = fechaInicio;
            fechaFinTitulo = fechaFin;
            cargando = true;
            await ActualizarTrueques();
        }
    }

    private void AceptarTrueque(int truequeId)
    {
        TruequeId = truequeId;
    }

    private void RechazarTrueque(int truequeId)
    { 
        TruequeId = truequeId;
    }

    private void CargarProductos(int truequeId)
    {
        TruequeId = truequeId;
    }

    private void VerProductos(int truequeId)
    {
        TruequeId = truequeId;
    }

}
