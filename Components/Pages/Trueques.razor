@page "/trueques"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TruequeToolsDataContext context
@inject NavigationManager NavMan
@inject IServiciosUsuario UsuarioService
@inject IServiciosTrueque TruequeService
@inject IServiciosOferta OfertaService

@attribute [Authorize(Roles = "Admin,Employee")]

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Trueques</h1>
        <h2 style="text-align:center">Sucursal X</h2>
        <hr />
        <div class="form-floating mb-3">
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (trueques.Count == 0)
                {
                    <div class="alert alert-warning" role="alert">
                        No hay trueques para mostrar...
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <!-- Añade esta clase para hacer la tabla responsiva -->
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Fecha</th>
                                    <th>Hora</th>
                                    <th>Estado</th>
                                    <th style="min-width: 120px;"></th> <!-- Utiliza min-width para asegurar un ancho mínimo -->
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in trueques)
                                {
                                    context.Entry(t).Reference(p => p.Oferta).Load();
                                    <tr>
                                        <td>@t.Id</td>
                                        <td>@t.Oferta!.Fecha.ToShortDateString()</td>
                                        <td>@t.Oferta!.Fecha.ToShortTimeString()</td>
                                        <td>@t.Estado</td>
                                        <td style="text-align: right;">
                                            <div class="d-flex justify-content-end">
                                                <div class="btn-group" style="margin-right: 1rem;">
                                                    <button class="btn btn-secondary rounded" style="margin-right: 0.5rem;" @onclick="@(() =>ConfirmarTrueque(t.Id))">Confirmar</button>
                                                    <button class="btn btn-danger rounded">Rechazar</button>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>

                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {

    List<Trueque> trueques = new List<Trueque>();

    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var sucursalId = int.Parse(authState.User!.FindFirst("SucursalId")!.Value);
        trueques = await TruequeService.ReadTruequesPendientesBySucursal(sucursalId);
        cargando = false;
    }

    private async Task ConfirmarTrueque(int truequeId)
    {
        Trueque trueque = await TruequeService.ReadTruequeById(truequeId);
        Oferta oferta = await OfertaService.ReadOfertaById(trueque.OfertaId);

        trueque.Estado = 1;
        await TruequeService.OverwriteTruequeById(trueque);
        oferta.Estado = 2;
        await OfertaService.OverwriteOfertaById(oferta);
        StateHasChanged();
        NavMan.NavigateTo("/");
    }

}
