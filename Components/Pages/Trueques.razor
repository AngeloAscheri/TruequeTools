@page "/trueques"

@using TruequeTools.Data
@using TruequeTools.Entities

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TruequeToolsDataContext context
@inject NavigationManager NavMan
@inject IServiciosUsuario UsuarioService
@inject IServiciosTrueque TruequeService
@inject IServiciosOferta OfertaService
@inject IServiciosSucursal SucursalService
@inject IServiciosPublicacion PublicacionService
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Admin,Employee")]

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="row">
    <div class="col-lg-12 pt-4 pb-4 border">
        <h1 style="text-align:center">Trueques</h1>
        <h2 style="text-align:center">@nombreSucursal</h2>
        <hr />
        <div class="form-floating mb-3">
            @if (cargando)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                </div>
            }
            else
            {
                @if (trueques.Count == 0)
                {
                    <div class="alert alert-warning" role="alert">
                        No hay trueques para mostrar...
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <!-- Añade esta clase para hacer la tabla responsiva -->
                        <table class="table table-bordered caption-top">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Fecha</th>
                                    <th>Hora</th>
                                    <th>Comentarios</th>
                                    <th>Estado</th>                               
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var t in trueques)
                                {
                                    var estado = "";
                                    var estilo = "";
                                    var comentario = "";

                                    if(t.Estado == -1)
                                    {
                                        estado = "Rechazado";
                                        estilo = "table-danger";
                                        comentario = "Trueque rechazado";
                                    }
                                    else if(t.Estado == 0)
                                    {
                                        estado = "Pendiente";
                                        estilo = "table-secondary";
                                        comentario = "Trueque pendiente";
                                    }
                                    else if(t.Estado == 1)
                                    {
                                        estado = "Completado";
                                        estilo = "table-success";
                                        comentario = "Trueque completado sin ventas";
                                    }
                                    else
                                    {
                                        estado = "Completado";
                                        estilo = "table-success";
                                        comentario = "Trueque completado con ventas";
                                    }

                                    context.Entry(t).Reference(p => p.Oferta).Load();
                                    <tr class="@estilo">
                                        <td>@t.Id</td>
                                        <td>@t.Oferta!.Fecha.ToShortDateString()</td>
                                        <td>@t.Oferta!.Fecha.ToShortTimeString()</td>
                                        <td>@comentario</td> 
                                        @if (t.Estado == 0)
                                        {
                                            <td style="text-align: right;">
                                                <div class="d-flex justify-content-end">
                                                    <div class="btn-group" style="margin-right: 1rem;">
                                                        <button class="btn btn-success rounded" style="margin-right: 0.5rem;" @onclick="@(() =>ConfirmarTrueque(t.Id))">Confirmar</button>
                                                        <button class="btn btn-danger rounded" @onclick="@(() =>RechazarTrueque(t.Id))">Rechazar</button>
                                                    </div>
                                                </div>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>@estado</td>
                                        }                                   
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>
</div>

<script>
    function refreshPage() {
        location.reload();
    }
</script>

@code {

    List<Trueque> trueques = new List<Trueque>();

    bool cargando = true;
    string? nombreSucursal;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var sucursalId = int.Parse(authState.User!.FindFirst("SucursalId")!.Value);
        var userId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value);
        if(userId == 1)
        {
            trueques = await TruequeService.ReadAllTrueques();
            nombreSucursal = "Todas las Sucursales";
        }
        else
        {
            trueques = await TruequeService.ReadTruequesBySucursal(sucursalId);
            Sucursal suc = await SucursalService.ReadSucursalById(sucursalId);
            nombreSucursal = "Sucursal " + suc.Nombre;
        }
        cargando = false;
    }

    private async Task ConfirmarTrueque(int truequeId)
    {
        Trueque trueque = await TruequeService.ReadTruequeById(truequeId); //Leo el trueque que voy a modificar
        Oferta oferta = await OfertaService.ReadOfertaById(trueque.OfertaId); //Leo la oferta del trueque que voy a modificar
       
        trueque.Estado = 1; //trueque pasa a estado completo sin productos
        oferta.Estado = 2; //oferta pasa a completada     

        await TruequeService.OverwriteTruequeById(trueque);
        await OfertaService.OverwriteOfertaById(oferta);
       
        StateHasChanged();

        await JS.InvokeVoidAsync("refreshPage");
    }

    private async Task RechazarTrueque(int truequeId)
    {
        Trueque trueque = await TruequeService.ReadTruequeById(truequeId); //Leo el trueque que voy a modificar
        Oferta oferta = await OfertaService.ReadOfertaById(trueque.OfertaId); //Leo la oferta del trueque que voy a modificar
        Publicacion publi1 = await PublicacionService.ReadPublicacionById(oferta.PublicacionQueOfertoId); //Leo la publicacion de la oferta a modificar
        Publicacion publi2 = await PublicacionService.ReadPublicacionById(oferta.PublicacionQueOfrezcoId); //Leo la publicacion de la oferta a modificar

        trueque.Estado = -1; //trueque pasa a rechazado
        oferta.Estado = -1; //oferta pasa a rechazada
        oferta.Motivo = "No se concretó el trueque";
        publi1.Deleted = false; //se activa nuevamente la publicacion
        publi2.Deleted = false; //se activa nuevamente la publicacion
        
        await TruequeService.OverwriteTruequeById(trueque);
        await OfertaService.OverwriteOfertaById(oferta);
        await PublicacionService.OverwritePublicacionById(publi1);
        await PublicacionService.OverwritePublicacionById(publi2);

        StateHasChanged();

        await JS.InvokeVoidAsync("refreshPage");
    }

}
