@page "/"

@using Microsoft.EntityFrameworkCore
@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext context
@inject NavigationManager NavMan

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Inicio</PageTitle>

<div style="text-align:center">
    <h1 style="margin:20px">Bienvenido a <span class="text-main-color">Trueque Tools</span></h1>
    <h3 style="margin:40px">En esta plataforma podras intercambiar productos con otros usuarios en tu zona</h3>
</div>

@if (publicaciones != null && publicaciones.Any())
{
    <div class="row margin:1rem">
        @foreach (var publi in publicaciones)
        {
            context.Entry(publi).Reference(p => p.Categoria).Load();
            context.Entry(publi).Reference(p => p.Sucursal).Load(); //Traigo los datos de la sucursal asociada con la publicacion

            <div class="col-lg-4 col-md-6 col-12 mb-3">
                <div class="card" style="margin:1rem">
                    @if (@publi.FotoUrl == null)
                    {
                        <img class="card-img-top-svg" src=resources/blank.svg alt="Foto del Producto">
                    }
                    else
                    {
                        <img class="card-img-top" src=images/@publi.FotoUrl alt="Foto del Producto">
                    }
                    <div class="card-body">
                        <h4 style="margin:0">@publi.Nombre</h4>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Sucursal: @publi.Sucursal!.Nombre</li>
                        <li class="list-group-item">Categoria: @publi.Categoria!.Nombre</li>
                    </ul>
                    <div class="card-body">
                        <a class="btn btn-secondary" @onclick="@(() => VerPublicacion(publi.Id))">Ver Publicacion</a>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    @if (showSpinner)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }
    else
    {
        <h6 style="text-align:center">no hay publicaciones para mostrar...</h6>
    }
}

@code {

    List<Publicacion> publicaciones = new List<Publicacion>();

    private bool showSpinner = true;

    void VerPublicacion(int id)
    {
        NavMan.NavigateTo($"/publicacion/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        publicaciones = await context.Publicaciones.Take(12).ToListAsync(); //Traigo las primeras 12 publicaciones
        
        await Task.Delay(500); // Espera 0.5 segundos y muestra el spinner durante ese tiempo
        showSpinner = false; // Desactiva el spinner
        StateHasChanged(); // Notifica a Blazor que debe actualizar la interfaz de usuario
    }

}