@page "/publicacion/{Id:int}"

@using TruequeTools.Data
@using TruequeTools.Components.Resources
@using TruequeTools.Entities

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TruequeToolsDataContext context
@inject NavigationManager NavMan
@inject IServiciosPublicacion PublicacionService
@inject IServiciosUsuario UsuarioService
@inject IServiciosPregunta PreguntaService
@inject IServiciosSucursal SucursalService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@attribute [Authorize(Roles = "Admin,User")]

<div>
    <ul class="list-group" style="padding-bottom:1.1rem">
        @if (cargando)
        {
            <ul class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only"></span>
                </div>
            </ul>
        }
        else
        {
            @if (PublicacionActual.Nombre != null)
            {
                context.Entry(PublicacionActual).Reference(p => p.Usuario).Load();
                context.Entry(PublicacionActual).Collection(p => p.Preguntas!).Load();
                context.Entry(PublicacionActual).Reference(p => p.Sucursal).Load();
                context.Entry(PublicacionActual).Reference(p => p.Categoria).Load();

                <li class="list-group-item"><h3>@PublicacionActual.Nombre - #@Id</h3></li>
                <li class="list-group-item">
                    @if (PublicacionActual.HasImages)
                    {
                        context.Entry(PublicacionActual).Collection(p => p.Imagenes!).Load(); @*Traigo las Imagenes de la Publicacion*@
                        @*var primeraImagen = PublicacionActual.Imagenes!.FirstOrDefault();
                        <img class="card-img-top" src="images/@primeraImagen!.FotoUrl" alt="Foto del Producto">*@

                        <div class="image-list">
                            <table class="table table-bordered">
                                <tr>
                                    @foreach (var img in PublicacionActual.Imagenes!)
                                    {
                                        <td>
                                            <img src="images/@img.FotoUrl" style="max-width:300px"/>
                                        </td>
                                    }
                                </tr>
                            </table>
                        </div>
                    }
                    else
                    {
                        <img class="card-img-top-svg" src=resources/blank.svg alt="Foto del Producto">    
                    }
                </li>
                <li class="list-group-item">@PublicacionActual.Descripcion</li>
                <li class="list-group-item">Publicado el <b>@PublicacionActual.FechaPublicacion</b> por <b>@PublicacionActual.Usuario!.Nombre</b></li>
                <li class="list-group-item">Sucursal de intercambio <b>@PublicacionActual.Sucursal!.Nombre</b></li>
                <li class="list-group-item">Categoría <b>@PublicacionActual.Categoria!.Nombre</b></li>
                <li class="list-group-item">
                    Preguntas
                    <div>
                        @if (PublicacionActual.Preguntas!.Count != 0)
                        {
                            @foreach (var pregunta in PublicacionActual.Preguntas)
                            {
                                context.Entry(pregunta).Reference(p => p.Usuario).Load();
                                <div class="mb-2 oferta-cuerpo">
                                    <p><b>@pregunta.Usuario!.Nombre</b> pregunta: @pregunta.Texto</p>
                                    @if (pregunta.Respuesta == null)
                                    {
                                        <p>Esperando respuesta...</p>
                                    }
                                    else
                                    {
                                        <p><b>@PublicacionActual.Usuario!.Nombre</b> responde: @pregunta.Respuesta</p>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <div class="mb-2 oferta-cuerpo">                          
                                <p>Todavía no hay preguntas en la publicacion...</p>
                            </div>
                        }
                    </div>
                </li>
                <li class="list-group-item">
                    @if (PublicacionActual.Usuario!.Id == UsuarioId)
                    {
                        <button class="btn btn-dark" @onclick="@(() => ModificarPublicacion(Id))">
                            Modificar
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                            </svg>
                        </button>
                        <button class="btn btn-danger" @onclick="@(() => EliminarPublicacion())">
                            Eliminar
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                            </svg>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#ModalOfertar">
                            Ofertar
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-up" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M11.5 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L11 2.707V14.5a.5.5 0 0 0 .5.5m-7-14a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L4 13.293V1.5a.5.5 0 0 1 .5-.5" />
                            </svg>
                        </button>
                        <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#ModalPreguntar">
                            Preguntar
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-patch-question" viewBox="0 0 16 16">
                                <path d="M8.05 9.6c.336 0 .504-.24.554-.627.04-.534.198-.815.847-1.26.673-.475 1.049-1.09 1.049-1.986 0-1.325-.92-2.227-2.262-2.227-1.02 0-1.792.492-2.1 1.29A1.7 1.7 0 0 0 6 5.48c0 .393.203.64.545.64.272 0 .455-.147.564-.51.158-.592.525-.915 1.074-.915.61 0 1.03.446 1.03 1.084 0 .563-.208.885-.822 1.325-.619.433-.926.914-.926 1.64v.111c0 .428.208.745.585.745" />
                                <path d="m10.273 2.513-.921-.944.715-.698.622.637.89-.011a2.89 2.89 0 0 1 2.924 2.924l-.01.89.636.622a2.89 2.89 0 0 1 0 4.134l-.637.622.011.89a2.89 2.89 0 0 1-2.924 2.924l-.89-.01-.622.636a2.89 2.89 0 0 1-4.134 0l-.622-.637-.89.011a2.89 2.89 0 0 1-2.924-2.924l.01-.89-.636-.622a2.89 2.89 0 0 1 0-4.134l.637-.622-.011-.89a2.89 2.89 0 0 1 2.924-2.924l.89.01.622-.636a2.89 2.89 0 0 1 4.134 0l-.715.698a1.89 1.89 0 0 0-2.704 0l-.92.944-1.32-.016a1.89 1.89 0 0 0-1.911 1.912l.016 1.318-.944.921a1.89 1.89 0 0 0 0 2.704l.944.92-.016 1.32a1.89 1.89 0 0 0 1.912 1.911l1.318-.016.921.944a1.89 1.89 0 0 0 2.704 0l.92-.944 1.32.016a1.89 1.89 0 0 0 1.911-1.912l-.016-1.318.944-.921a1.89 1.89 0 0 0 0-2.704l-.944-.92.016-1.32a1.89 1.89 0 0 0-1.912-1.911z" />
                                <path d="M7.001 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0" />
                            </svg>
                        </button>
                    }
                </li>
            }
            else
            {
                <div class="alert alert-danger" role="alert">
                    <h3>Error: no se encontró o no existe la publicacion seleccionada</h3>
                </div>
            }
        }
    </ul>
</div>

<Ofertar 
    PublicacionId="PublicacionActual.Id"
    UserRequesterId="UsuarioId"
    PublicacionActual="PublicacionActual"
    MisPublicaciones="MisPublicaciones"
    OfertasPublicacionActual="OfertasPublicacionActual"/> @*MODAL CON LA FUNCION OFERTAR*@

<Preguntar 
    PublicacionId="PublicacionActual.Id"
    UserRequesterId="UsuarioId"
    PublicacionOwnerId="PublicacionActual.UsuarioId"/> @*MODAL CON LA FUNCION PREGUNTAR*@

@code {

    [Parameter]
    public int Id { get; set; }

    public bool cargando { get; set; }

    public Publicacion PublicacionActual { get; set; } = new();
    public List<Publicacion> MisPublicaciones { get; set; } = new();
    public List<Oferta> OfertasPublicacionActual { get; set; } = new();
    public int UsuarioId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UsuarioId = int.Parse(authState.User!.FindFirst("UsuarioId")!.Value);
    }

    protected override async Task OnParametersSetAsync()
    {
        cargando = true;
        PublicacionActual = await PublicacionService.ReadPublicacionById(Id); //LEE LA PUBLICACION ACTUAL
        MisPublicaciones = await PublicacionService.ReadAllPublicacionesActivasCurrentUser(UsuarioId); //TRAE LAS PUBLICACIONES DEL USUARIO
        OfertasPublicacionActual = await PublicacionService.ReadAllOfertasOfPublicacion(PublicacionActual.Id);
        await Task.Delay(500);
        cargando = false;
    }

    public async Task EliminarPublicacion()
    {

        PublicacionActual.Deleted = true;

        await PublicacionService.OverwritePublicacionById(PublicacionActual);
        NavMan.NavigateTo($"/misPublicaciones");
    }

    void ModificarPublicacion(int id)
    {
        NavMan.NavigateTo($"/modificarPublicacion/{id}");
    }

}