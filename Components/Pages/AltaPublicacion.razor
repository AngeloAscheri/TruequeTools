@page "/alta-publicacion"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using System.Security.Claims
@using TruequeTools.Data
@using TruequeTools.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavMan
@inject IWebHostEnvironment WebHostEnv
@inject IServiciosSucursal SucursalService
@inject IServiciosCategoria CategoriaService
@inject IServiciosPublicacion PublicacionService
@inject IJSRuntime JS

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Publicar</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <h1 style="text-align:center">Publicar</h1>
        <EditForm Model="@Modelo" enctype="multipart/form-data" OnValidSubmit ="CargarPublicacion" OnInvalidSubmit="LimpiarImagen" FormName="CargarPublicacionForm">
            <DataAnnotationsValidator />
            <h2 style="text-align:center">Dar a conocer tu producto</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @MensajeError
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                <label for="nombre">Nombre del producto</label>
                <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                <label for="descripcion">Descripcion del producto</label>
                <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                    @foreach (var suc in sucursales)
                    {
                        <option value="@suc.Id">@suc.Nombre</option>
                    }
                </InputSelect>
                <label for="sucursal">Sucursal</label>
                <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                    <option value=0>Seleccione una categoría</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.Id">@cat.Nombre</option>
                    }
                </InputSelect>
                <label for="categoria">Categoria</label>
                <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
            </div>
            <hr />
            <h5>Foto (opcional)</h5>
            <div class="form-floating mb-3">
                <InputFile @ref="inputFile" OnChange="ShowPreview" accept="image/*" class="form-control" />
            </div>
            <ValidationMessage For="() => Modelo.FileSize" class="text-danger" />
            <div class="form-floating mb-3">
                <img class="img-fluid img-thumbnail rounded mx-auto d-block w-100" @ref="previewImageElem" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-dark">Crear Publicacion</button>
        </EditForm>
    </div>
</div>

<script>
    window.previewImage = (inputElem, imgElem) => {
        const url = URL.createObjectURL(inputElem.files[0]);
        imgElem.addEventListener('load', () => URL.revokeObjectURL(url), { once: true });
        imgElem.src = url;
    }
</script>

<script>
    window.resetInputFile = (inputElem) => {
        inputElem.value = "";
    }
</script>

@code {
    private String? MensajeError;
    private ClaimsPrincipal? user;

    List<Sucursal> sucursales = new List<Sucursal>();
    List<Categoria> categorias = new List<Categoria>();
    int sucursalPreferidaId;

    private IBrowserFile? file;
    private InputFile? inputFile;
    private ElementReference previewImageElem;

    private async Task ShowPreview(InputFileChangeEventArgs e)
    {
        file = e.File;
        Modelo.FileSize = file.Size;
        StateHasChanged();
        if (file != null && Modelo.FileSize <= 5 * 1024 * 1024)
        {
            await JS.InvokeVoidAsync("previewImage", inputFile!.Element, previewImageElem); //código para hacer la preview de la imágen, funciona con javascript

        }
        //código para hacer la preview de la imágen, funciona con javascript

    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        sucursales = await SucursalService.ReadAllSucursales(); //LECTURA DE TODAS LAS SUCURSALES
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
        sucursalPreferidaId = int.Parse(user!.FindFirst("SucursalId")!.Value);
    }

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Modelo.SucursalId = sucursalPreferidaId; // Configurar el modelo de vista con la sucursal preferida del usuario
    }

    public async Task CargarPublicacion(EditContext editContext)
    {
        if (file != null)
        {
            var uniqueFileName = $"{DateTime.Now:yyyyMMddHHmmssfff}{Path.GetExtension(file.Name)}";
            var filePath = Path.Combine(WebHostEnv.WebRootPath, "images", uniqueFileName);

            try
            {
                using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    // Leer el contenido del archivo cargado en un búfer de memoria
                    await using (var memoryStream = new MemoryStream())
                    {
                        await file.OpenReadStream(5000 * 1024).CopyToAsync(memoryStream);

                        // Copiar el contenido del búfer de memoria al archivo de destino
                        memoryStream.Seek(0, SeekOrigin.Begin); // Asegurar que el puntero esté al principio del búfer
                        await memoryStream.CopyToAsync(fileStream);
                    }
                    Modelo.FotoUrl = $"{uniqueFileName}";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message); // Manejar cualquier excepción ocurrida durante la operación de escritura
            }
        }

        var publicacion = new Publicacion();

        publicacion.Nombre = Modelo.Nombre;
        publicacion.Descripcion = Modelo.Descripcion;
        publicacion.CategoriaId = Modelo.CategoriaId;
        publicacion.UsuarioId = int.Parse(user!.FindFirst("UsuarioId")!.Value);
        publicacion.SucursalId = Modelo.SucursalId;
        publicacion.FotoUrl = Modelo.FotoUrl;

        await PublicacionService.CreatePublicacion(publicacion);

        NavMan.NavigateTo("/");

    }

    public async Task LimpiarImagen(EditContext editContext)
    {
        Modelo.FileSize = 0;
        file = null;
        if (inputFile != null)
        {
            await JS.InvokeVoidAsync("resetInputFile", inputFile.Element); // Limpia el input file usando JavaScript
        }
        StateHasChanged();
    }

}
