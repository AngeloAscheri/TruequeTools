@page "/alta-publicacion"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using TruequeTools.Data
@using TruequeTools.Entities
@using Microsoft.AspNetCore.Components.Authorization

@inject TruequeToolsDataContext appDbContext
@inject NavigationManager NavMan
@inject IServiciosProducto ProductoService
@inject IServiciosSucursal SucursalService
@inject IServiciosCategoria CategoriaService
@inject IServiciosPublicacion PublicacionService
@inject IJSRuntime JS
@inject ServiciosUsuarioAutentificado UserService

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,User")]

<PageTitle>Publicar</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <h1 style="text-align:center">Publicar</h1>
        <EditForm Model="@Modelo" OnValidSubmit="CargarPublicacion" FormName="CargarPublicacionForm">
            <DataAnnotationsValidator />
            <h2 style="text-align:center">Dar a conocer tu producto</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            @if (!string.IsNullOrEmpty(MensajeError))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @MensajeError
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                <label for="nombre">Nombre del producto</label>
                <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                <label for="descripcion">Descripcion del producto</label>
                <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                    @foreach (var suc in sucursales)
                    {
                        <option value="@suc.Id">@suc.Nombre</option>
                    }
                </InputSelect>
                <label for="sucursal">Sucursal</label>
                <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="@Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                    <option value=0>Seleccione una categoría</option>
                    @foreach (var cat in categorias)
                    {
                        <option value="@cat.Id">@cat.Nombre</option>
                    }
                </InputSelect>
                <label for="categoria">Categoria</label>
                <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
            </div>
            <hr />
            <h5>Foto del producto (opcional)</h5>
            <div class="form-floating mb-3">
                <InputFile @ref="inputFile" OnChange="ShowPreview" />
            </div>
            <div class="form-floating mb-3">
                <img class="img-fluid img-thumbnail rounded mx-auto d-block w-100" @ref="previewImageElem" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-dark">Crear Publicacion</button>
        </EditForm>  
    </div>
</div>

<script>
    window.previewImage = (inputElem, imgElem) => {
        const url = URL.createObjectURL(inputElem.files[0]);
        imgElem.addEventListener('load', () => URL.revokeObjectURL(url), { once: true });
        imgElem.src = url;
    }
</script>

@code {

    //código para hacer la preview de la imágen, funciona con javascript
    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private async Task ShowPreview() => await JS.InvokeVoidAsync(
        "previewImage", inputFile!.Element, previewImageElem);
    //código para hacer la preview de la imágen, funciona con javascript

    public HttpContext? HttpContext { get; set; }

    List<Sucursal> sucursales = new List<Sucursal>();
    List<Categoria> categorias = new List<Categoria>();
    int sucursalPreferidaId;

    protected override async Task OnInitializedAsync()
    {
        sucursales = await SucursalService.ReadAllSucursales(); //LECTURA DE TODAS LAS SUCURSALES
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
        await UserService.InitializeAsync(); // obtengo los datos del usuario en sesión
        sucursalPreferidaId = int.Parse(UserService.Current.FindFirst("IdSucursal")!.Value);
    }

    private String? MensajeError;

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Modelo.SucursalId = sucursalPreferidaId; // Configurar el modelo de vista con la sucursal preferida del usuario
    }

    public async Task CargarPublicacion(EditContext editContext)
    {
        var publicacion = new Publicacion();

        publicacion.UsuarioId = int.Parse(@UserService.Current.FindFirst("IdUsuario")!.Value); // weno acá ya lo cambié...
        publicacion.Titulo = Modelo.Nombre;
        publicacion.SucursalId = Modelo.SucursalId;

        var publicacionId = await PublicacionService.CreatePublicacion(publicacion);

        var producto = new Producto();

        producto.PublicacionId = publicacionId;
        producto.Nombre = Modelo.Nombre;
        producto.Descripcion = Modelo.Descripcion;
        //producto.FotoUrl = "prueba1.jpg";
        producto.CategoriaId = Modelo.CategoriaId;

        await ProductoService.CreateProducto(producto);
        NavMan.NavigateTo("/");

    }
}
