@page "/alta-publicacion"

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Logging
@using TruequeTools.Data
@using TruequeTools.Entities

@inject TruequeToolsDataContext appDbContext
@inject NavigationManager NavMan
@inject InterfazServiciosProducto ProductoService
@inject InterfazServiciosSucursal SucursalService
@inject InterfazServiciosCategoria CategoriaService
@inject InterfazServiciosPublicacion PublicacionService

@attribute [Authorize(Roles = "Admin,User")] 

<PageTitle>Publicar</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <h1 style="text-align:center">Crear Publicación</h1>
        <div class="container">
            <EditForm Model="@Modelo" OnValidSubmit="CargarPublicacion" FormName="CargarPublicacionForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                @if (!string.IsNullOrEmpty(MensajeError))
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @MensajeError
                    </div>
                }
                <div class="image-container mb-3">
                    <input type="file" accept="image/*" id="imagenInput">
                    <img id="imagenPreview" class="image-preview" src="#" alt="Vista previa de la imagen">
                </div>
                <div class="caontainerRelleno">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Modelo.Nombre" class="form-control" autocomplete="off" aria-required="true" placeholder="Nombre del producto" maxlength="50" />
                    <label for="nombre">Nombre del producto</label>
                    <ValidationMessage For="() => Modelo.Nombre" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Modelo.Descripcion" class="form-control" autocomplete="off" aria-required="true" placeholder="Descripcion del producto" maxlength="200" />
                    <label for="descripcion">Descripcion del producto</label>
                    <ValidationMessage For="() => Modelo.Descripcion" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="@Modelo.SucursalId" class="form-control" autocomplete="sucursal" aria-required="true" placeholder="" maxlength="50">
                        @foreach (var suc in sucursales)
                        {
                            <option value="@suc.Id">@suc.Nombre</option>
                        }
                    </InputSelect>
                    <label for="sucursal">Sucursal</label>
                    <ValidationMessage For="() => Modelo.SucursalId" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="@Modelo.CategoriaId" class="form-control" autocomplete="categoria" aria-required="true" placeholder="" maxlength="50">
                        @foreach (var cat in categorias)
                        {
                            <option value="@cat.Id">@cat.Nombre</option>
                        }
                    </InputSelect>
                    <label for="categoria">Categoria</label>
                    <ValidationMessage For="() => Modelo.CategoriaId" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Crear Publicacion</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    List<Sucursal> sucursales = new List<Sucursal>();
    List<Categoria> categorias = new List<Categoria>();

    protected override async Task OnInitializedAsync()
    {
        sucursales = await SucursalService.ReadAllSucursales(); //LECTURA DE TODAS LAS SUCURSALES
        categorias = await CategoriaService.ReadAllCategorias(); //LECTURA DE TODAS LAS CATEGORIAS
    }

    private String? MensajeError;

    [SupplyParameterFromForm]
    private PublicacionViewModel Modelo { get; set; } = new();

    public async Task CargarPublicacion(EditContext editContext)
    {
        var publicacion = new Publicacion();
        var producto = new Producto();

        producto.Nombre = Modelo.Nombre;
        producto.Descripcion = Modelo.Descripcion;
        producto.FotoUrl = "prueba1.jpg";
        producto.CategoriaId = Modelo.CategoriaId;

        //publicacion.Titulo = Modelo.Nombre;
        //publicacion.UsuarioId = User.Identity.Id;
        //publicacion.ProductoId = producto.Id;

        await ProductoService.CreateProducto(producto);
        //await PublicacionService.CreatePublicacion(publicacion);
        NavMan.NavigateTo("/");

    }
}
