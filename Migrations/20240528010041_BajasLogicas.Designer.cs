// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruequeTools.Data;

#nullable disable

namespace TruequeTools.Migrations
{
    [DbContext(typeof(TruequeToolsDataContext))]
    [Migration("20240528010041_BajasLogicas")]
    partial class BajasLogicas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TruequeTools.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "$0 a $5.000"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "$5.000 a $10.000"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Mas de $10.000"
                        });
                });

            modelBuilder.Entity("TruequeTools.Entities.Imagen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fotoUrl");

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int")
                        .HasColumnName("publicacionId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionId");

                    b.ToTable("imagenes");
                });

            modelBuilder.Entity("TruequeTools.Entities.Oferta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<int>("PublicacionQueOfertoId")
                        .HasColumnType("int")
                        .HasColumnName("publicacionOfertadaId");

                    b.Property<int>("PublicacionQueOfrezcoId")
                        .HasColumnType("int")
                        .HasColumnName("publicacionOfrecidaId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionQueOfertoId");

                    b.HasIndex("PublicacionQueOfrezcoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ofertas");
                });

            modelBuilder.Entity("TruequeTools.Entities.Pregunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PublicacionId")
                        .HasColumnType("int")
                        .HasColumnName("publicacionId");

                    b.Property<string>("Respuesta")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("respuesta");

                    b.Property<string>("Texto")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("texto");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PublicacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("preguntas");
                });

            modelBuilder.Entity("TruequeTools.Entities.Publicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoriaId");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("deleted");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<DateOnly>("FechaPublicacion")
                        .HasColumnType("date")
                        .HasColumnName("fechaPublicacion");

                    b.Property<bool>("HasImages")
                        .HasColumnType("bit")
                        .HasColumnName("hasImages");

                    b.Property<bool>("IsOculta")
                        .HasColumnType("bit")
                        .HasColumnName("isOculta");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit")
                        .HasColumnName("isPremium");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int")
                        .HasColumnName("sucursalId");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuarioId");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("publicaciones");
                });

            modelBuilder.Entity("TruequeTools.Entities.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("direccion");

                    b.Property<string>("Localidad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("localidad");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("sucursales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle 13 y 38",
                            Localidad = "La Plata",
                            Nombre = "Central"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle 66 y 137",
                            Localidad = "La Plata",
                            Nombre = "Los Hornos"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Jorge Bell y Cantilo",
                            Localidad = "La Plata",
                            Nombre = "City Bell"
                        });
                });

            modelBuilder.Entity("TruequeTools.Entities.Trueque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OfertaId")
                        .HasColumnType("int")
                        .HasColumnName("ofertaId");

                    b.HasKey("Id");

                    b.HasIndex("OfertaId")
                        .IsUnique();

                    b.ToTable("trueques");
                });

            modelBuilder.Entity("TruequeTools.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("apellido");

                    b.Property<string>("Contraseña")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("contraseña");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fechaNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rol");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int")
                        .HasColumnName("sucursalId");

                    b.HasKey("Id");

                    b.HasIndex("SucursalId");

                    b.ToTable("usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Admin",
                            Contraseña = "admin",
                            Deleted = false,
                            Email = "admin@admin",
                            FechaNacimiento = new DateOnly(1, 1, 1),
                            Nombre = "Admin",
                            Rol = "Admin",
                            SucursalId = 1
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "User",
                            Contraseña = "user",
                            Deleted = false,
                            Email = "user@user",
                            FechaNacimiento = new DateOnly(1, 1, 1),
                            Nombre = "User",
                            Rol = "User",
                            SucursalId = 1
                        });
                });

            modelBuilder.Entity("TruequeTools.Entities.Imagen", b =>
                {
                    b.HasOne("TruequeTools.Entities.Publicacion", null)
                        .WithMany("Imagenes")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruequeTools.Entities.Oferta", b =>
                {
                    b.HasOne("TruequeTools.Entities.Publicacion", "PublicacionQueOferto")
                        .WithMany("OfertasRealizadas")
                        .HasForeignKey("PublicacionQueOfertoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TruequeTools.Entities.Publicacion", "PublicacionQueOfrezco")
                        .WithMany("OfertasRecibidas")
                        .HasForeignKey("PublicacionQueOfrezcoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruequeTools.Entities.Usuario", "Usuario")
                        .WithMany("Ofertas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PublicacionQueOferto");

                    b.Navigation("PublicacionQueOfrezco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TruequeTools.Entities.Pregunta", b =>
                {
                    b.HasOne("TruequeTools.Entities.Publicacion", "Publicacion")
                        .WithMany("Preguntas")
                        .HasForeignKey("PublicacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruequeTools.Entities.Usuario", "Usuario")
                        .WithMany("Preguntas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TruequeTools.Entities.Publicacion", b =>
                {
                    b.HasOne("TruequeTools.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TruequeTools.Entities.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TruequeTools.Entities.Usuario", "Usuario")
                        .WithMany("Publicaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Sucursal");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TruequeTools.Entities.Trueque", b =>
                {
                    b.HasOne("TruequeTools.Entities.Oferta", "Oferta")
                        .WithOne("Trueque")
                        .HasForeignKey("TruequeTools.Entities.Trueque", "OfertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Oferta");
                });

            modelBuilder.Entity("TruequeTools.Entities.Usuario", b =>
                {
                    b.HasOne("TruequeTools.Entities.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("TruequeTools.Entities.Oferta", b =>
                {
                    b.Navigation("Trueque");
                });

            modelBuilder.Entity("TruequeTools.Entities.Publicacion", b =>
                {
                    b.Navigation("Imagenes");

                    b.Navigation("OfertasRealizadas");

                    b.Navigation("OfertasRecibidas");

                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("TruequeTools.Entities.Usuario", b =>
                {
                    b.Navigation("Ofertas");

                    b.Navigation("Preguntas");

                    b.Navigation("Publicaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
